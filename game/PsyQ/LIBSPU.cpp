//------------------------------------------------------------------------------------------------------------------------------------------
// Module containing a partial reimplementation of the PSY-Q 'LIBSPU' library.
// These functions are not neccesarily faithful to the original code, and are reworked to make the game run in it's new environment.
//------------------------------------------------------------------------------------------------------------------------------------------
#include "LIBSPU.h"

#include "Asserts.h"
#include "PcPsx/PsxVm.h"
#include "Spu.h"

#include <cmath>

// The current reverb mode in use
static SpuReverbMode gReverbMode = SPU_REV_MODE_OFF;

// Where to write to next in SPU ram
static uint32_t gTransferStartAddr;

// The 'base' note for each voice: this is the musical note at which the sample rate is considered to be 44,100 Hz.
// The actual semitone is encoded in the top 8-bits, the 1/128 semitone fraction is encoded in the low 8-bits.
//
// LIBSPU keeps track of this because it needs this reference note when converting notes to pitch.
// See the implementation of 'LIBSPU__spu_note2pitch' for more details on that.
static uint16_t gVoiceBaseNotes[SPU_NUM_VOICES] = {};

// Internal LIBSPU function: convert a note to a pitch.
// See definition for details.
uint16_t LIBSPU__spu_note2pitch(
    const int32_t centerNote,
    const uint16_t centerNoteFrac,
    const int32_t offsetNote,
    const uint16_t offsetNoteFrac
) noexcept;

// TODO: REMOVE:  temporary testing of a new reimplementation for 'LIBSPU__spu_note2pitch'
#define TEST_NOTE_TO_PITCH 1

#if TEST_NOTE_TO_PITCH

// TODO: REMOVE: the original version of 'LIBSPU__spu_note2pitch '
uint16_t LIBSPU__spu_note2pitch_ORIG(
    const int32_t centerNote,
    const int32_t centerNoteFrac,
    const int32_t offsetNote,
    const int32_t offsetNoteFrac
) noexcept;

// TODO: REMOVE: a test case for comparing the original version of 'LIBSPU__spu_note2pitch' against PsyDoom's reimplementation
struct n2pTest {
    int32_t     centerNote;
    uint16_t    centerNoteFrac;
    int32_t     offsetNote;
    uint16_t    offsetNoteFrac;
};

// TODO: REMOVE: test cases for 'LIBSPU__spu_note2pitch' : all of the notes that the game can trigger
constexpr n2pTest NOTE_2_PITCH_TESTS[] = {
    { 82,   0,  58,   0  },
    { 82,   0,  48,   0  },
    { 82,   32, 48,   0  },
    { 82,   32, 48,   32 },
    { 82,   0,  22,   0  },
    { 84,   9,  48,   0  },
    { 84,   9,  36,   0  },
    { 84,   9,  62,   0  },
    { 84,   9,  63,   0  },
    { 72,   0,  34,   0  },
    { 72,   0,  32,   0  },
    { 84,   9,  47,   0  },
    { 84,   9,  59,   0  },
    { 84,   9,  66,   0  },
    { 72,   0,  31,   0  },
    { 84,   9,  43,   0  },
    { 84,   9,  31,   0  },
    { 84,   9,  67,   0  },
    { 84,   9,  69,   0  },
    { 84,   9,  70,   0  },
    { 84,   9,  35,   0  },
    { 72,   0,  36,   0  },
    { 84,   9,  55,   0  },
    { 84,   9,  57,   0  },
    { 84,   9,  58,   0  },
    { 72,   0,  29,   0  },
    { 84,   9,  60,   0  },
    { 84,   9,  72,   0  },
    { 84,   9,  43,   0  },
    { 72,   0,  43,   0  },
    { 84,   9,  74,   0  },
    { 84,   9,  75,   0  },
    { 84,   9,  71,   0  },
    { 84,   9,  78,   0  },
    { 72,   0,  28,   0  },
    { 84,   9,  79,   0  },
    { 84,   9,  80,   0  },
    { 84,   9,  65,   0  },
    { 84,   9,  68,   0  },
    { 84,   9,  56,   0  },
    { 84,   9,  44,   0  },
    { 84,   9,  77,   0  },
    { 72,  32,  39,   0  },
    { 72,  32, 63,   0 },
    { 72,  32, 66,   0 },
    { 72,  32, 65,   0 },
    { 72,  32, 54,   0 },
    { 72,  32, 51,   0 },
    { 72,  32, 58,   0 },
    { 72,   0, 47,   0 },
    { 72,   0, 60,   0 },
    { 72,   0, 84,   0 },
    { 72,  32, 59,   0 },
    { 72,   0, 72,   0 },
    { 72,  32, 47,   0 },
    { 72,  32, 46,   0 },
    { 72,   0, 40,   0 },
    { 72,  32, 62,   0 },
    { 72,  32, 53,   0 },
    { 72,   0, 48,   0 },
    { 72,   0, 62,   0 },
    { 72,   0, 67,   0 },
    { 72,   0, 50,   0 },
    { 72,   0, 53,   0 },
    { 72,   0, 45,   0 },
    { 72,   0, 52,   0 },
    { 72,   0, 59,   0 },
    { 72,   0, 57,   0 },
    { 72,   0, 41,   0 },
    { 72,  32, 41,   0 },
    { 72,   0, 38,   0 },
    { 72,  32, 42,   0 },
    { 72,  32, 35,   0 },
    { 72,  32, 27,   0 },
    { 72,   0, 35,   0 },
    { 72,   0, 55,   0 },
    { 72,  32, 23,   0 },
    { 60,   0, 62,  82 },
    { 60,   0, 38,  82 },
    { 60,   0, 38,  91 },
    { 60,   0, 45,  91 },
    { 60,   0, 50,  91 },
    { 60,   0, 62,  91 },
    { 60,   0, 38, 110 },
    { 60,   0, 45, 110 },
    { 60,   0, 50, 110 },
    { 60,   0, 62, 110 },
    { 60,   0, 39,   0 },
    { 60,   0, 46,   0 },
    { 60,   0, 51,   0 },
    { 60,   0, 63,   0 },
    { 60,   0, 39,  18 },
    { 60,   0, 46,  18 },
    { 60,   0, 51,  18 },
    { 60,   0, 63,  18 },
    { 60,   0, 39,  36 },
    { 60,   0, 46,  36 },
    { 60,   0, 51,  36 },
    { 60,   0, 63,  36 },
    { 60,   0, 39,  46 },
    { 60,   0, 46,  46 },
    { 60,   0, 51,  46 },
    { 60,   0, 63,  46 },
    { 60,   0, 39,  64 },
    { 60,   0, 46,  64 },
    { 60,   0, 51,  64 },
    { 60,   0, 63,  64 },
    { 60,   0, 39,  73 },
    { 60,   0, 46,  73 },
    { 60,   0, 51,  73 },
    { 60,   0, 63,  73 },
    { 60,   0, 39, 100 },
    { 60,   0, 46, 100 },
    { 60,   0, 51, 100 },
    { 60,   0, 63, 100 },
    { 60,   0, 39, 119 },
    { 60,   0, 46, 119 },
    { 60,   0, 51, 119 },
    { 60,   0, 63, 119 },
    { 60,   0, 40,   0 },
    { 60,   0, 47,   0 },
    { 60,   0, 52,   0 },
    { 60,   0, 64,   0 },
    { 60,   0, 40,  18 },
    { 60,   0, 47,  18 },
    { 60,   0, 52,  18 },
    { 60,   0, 64,  18 },
    { 60,   0, 40,  27 },
    { 60,   0, 47,  27 },
    { 60,   0, 52,  27 },
    { 60,   0, 64,  27 },
    { 60,   0, 40,  46 },
    { 60,   0, 47,  46 },
    { 60,   0, 52,  46 },
    { 60,   0, 64,  46 },
    { 60,   0, 40,  64 },
    { 60,   0, 47,  64 },
    { 60,   0, 52,  64 },
    { 60,   0, 64,  64 },
    { 60,   0, 40,  82 },
    { 60,   0, 47,  82 },
    { 60,   0, 52,  82 },
    { 60,   0, 64,  82 },
    { 60,   0, 40, 100 },
    { 60,   0, 47, 100 },
    { 60,   0, 52, 100 },
    { 60,   0, 64, 100 },
    { 60,   0, 40, 119 },
    { 60,   0, 47, 119 },
    { 60,   0, 52, 119 },
    { 60,   0, 64, 119 },
    { 60,   0, 41,   0 },
    { 60,   0, 48,   0 },
    { 60,   0, 53,   0 },
    { 60,   0, 65,   0 },
    { 60,   0, 40,  73 },
    { 60,   0, 47,  73 },
    { 60,   0, 52,  73 },
    { 60,   0, 64,  73 },
    { 60,   0, 40,  55 },
    { 60,   0, 47,  55 },
    { 60,   0, 52,  55 },
    { 60,   0, 64,  55 },
    { 60,   0, 40,  36 },
    { 60,   0, 47,  36 },
    { 60,   0, 52,  36 },
    { 60,   0, 64,  36 },
    { 60,   0, 39,   9 },
    { 60,   0, 46,   9 },
    { 60,   0, 51,   9 },
    { 60,   0, 63,   9 },
    { 60,   0, 38, 119 },
    { 60,   0, 45, 119 },
    { 60,   0, 50, 119 },
    { 60,   0, 62, 119 },
    { 60,   0, 45,  82 },
    { 60,   0, 50,  82 },
    { 60,   0, 38,  64 },
    { 60,   0, 45,  64 },
    { 60,   0, 50,  64 },
    { 60,   0, 62,  64 },
    { 60,   0, 38,  37 },
    { 60,   0, 45,  37 },
    { 60,   0, 50,  37 },
    { 60,   0, 62,  37 },
    { 60,   0, 38,   9 },
    { 60,   0, 45,   9 },
    { 60,   0, 50,   9 },
    { 60,   0, 62,   9 },
    { 60,   0, 37, 110 },
    { 60,   0, 44, 110 },
    { 60,   0, 49, 110 },
    { 60,   0, 61, 110 },
    { 60,   0, 37,  73 },
    { 60,   0, 44,  73 },
    { 60,   0, 49,  73 },
    { 60,   0, 61,  73 },
    { 60,   0, 37,  46 },
    { 60,   0, 44,  46 },
    { 60,   0, 49,  46 },
    { 60,   0, 61,  46 },
    { 60,   0, 37,  37 },
    { 60,   0, 44,  37 },
    { 60,   0, 49,  37 },
    { 60,   0, 61,  37 },
    { 60,   0, 37,   9 },
    { 60,   0, 44,   9 },
    { 60,   0, 49,   9 },
    { 60,   0, 61,   9 },
    { 60,   0, 37,   0 },
    { 60,   0, 44,   0 },
    { 60,   0, 49,   0 },
    { 60,   0, 61,   0 },
    { 60,   0, 36, 101 },
    { 60,   0, 43, 101 },
    { 60,   0, 48, 101 },
    { 60,   0, 60, 101 },
    { 60,   0, 36,  73 },
    { 60,   0, 43,  73 },
    { 60,   0, 48,  73 },
    { 60,   0, 60,  73 },
    { 60,   0, 36,  55 },
    { 60,   0, 43,  55 },
    { 60,   0, 48,  55 },
    { 60,   0, 60,  55 },
    { 60,   0, 36,  27 },
    { 60,   0, 43,  27 },
    { 60,   0, 48,  27 },
    { 60,   0, 60,  27 },
    { 60,   0, 36,   9 },
    { 60,   0, 43,   9 },
    { 60,   0, 48,   9 },
    { 60,   0, 60,   9 },
    { 60,   0, 36,   0 },
    { 60,   0, 43,   0 },
    { 60,   0, 60,   0 },
    { 60,   0, 84,   0 },
    { 60,   0, 79,   0 },
    { 60,   0, 72,   0 },
    { 84,   0, 63,   0 },
    { 84,   0, 60,   0 },
    { 84,   0, 67,   0 },
    { 84,   0, 68,   0 },
    { 84,   0, 59,   0 },
    { 84,   0, 62,   0 },
    { 84,   0, 58,   0 },
    { 60,   0, 67,   0 },
    { 84,   0, 87,   0 },
    { 84,   0, 84,   0 },
    { 84,   0, 92,   0 },
    { 84,   0, 91,   0 },
    { 84,   0, 83,   0 },
    { 84,   0, 86,   0 },
    { 84,   0, 82,   0 },
    { 60,   0, 29,   0 },
    { 60,   0, 96,   0 },
    { 60,   0, 91,   0 },
    { 60,   0, 89,   0 },
    { 60,   0, 38,   0 },
    { 60,   0, 55,   0 },
    { 84,   0, 69,   0 },
    { 84,   0, 72,   0 },
    { 84,   0, 76,   0 },
    { 84,   0, 79,   0 },
    { 84,   0, 78,   0 },
    { 84,   0, 74,   0 },
    { 60,   0, 62,   0 },
    { 84,   0, 64,   0 },
    { 84,   0, 66,   0 },
    { 84,   0, 40,   0 },
    { 84,   0, 36,   0 },
    { 84,   0, 38,   0 },
    { 84,   0, 75,   0 },
    { 84,   0, 77,   0 },
    { 84,   0, 71,   0 },
    { 84,   0, 48,   0 },
    { 84,   0, 44,   0 },
    { 84,   0, 80,   0 },
    { 84,   0, 47,   0 },
    { 84,   0, 46,   0 },
    { 84,   0, 70,   0 },
    { 84,   0, 54,   0 },
    { 84,   0, 57,   0 },
    { 84,   0, 50,   0 },
    { 84,   0, 51,   0 },
    { 84,   0, 55,   0 },
    { 84,   0, 65,   0 },
    { 60,   0, 43,  18 },
    { 60,   0, 36,  18 },
    { 60,   0, 48,  18 },
    { 60,   0, 43,  37 },
    { 60,   0, 36,  37 },
    { 60,   0, 48,  37 },
    { 60,   0, 43,  91 },
    { 60,   0, 36,  91 },
    { 60,   0, 48,  91 },
    { 60,   0, 43, 119 },
    { 60,   0, 36, 119 },
    { 60,   0, 48, 119 },
    { 60,   0, 44,  27 },
    { 60,   0, 37,  27 },
    { 60,   0, 49,  27 },
    { 60,   0, 44,  55 },
    { 60,   0, 37,  55 },
    { 60,   0, 49,  55 },
    { 60,   0, 44,  64 },
    { 60,   0, 37,  64 },
    { 60,   0, 49,  64 },
    { 60,   0, 44,  82 },
    { 60,   0, 37,  82 },
    { 60,   0, 49,  82 },
    { 60,   0, 44, 101 },
    { 60,   0, 37, 101 },
    { 60,   0, 49, 101 },
    { 60,   0, 44, 119 },
    { 60,   0, 37, 119 },
    { 60,   0, 49, 119 },
    { 60,   0, 45,  27 },
    { 60,   0, 38,  27 },
    { 60,   0, 50,  27 },
    { 60,   0, 45,  46 },
    { 60,   0, 38,  46 },
    { 60,   0, 50,  46 },
    { 60,   0, 45,  73 },
    { 60,   0, 38,  73 },
    { 60,   0, 50,  73 },
    { 60,   0, 45, 100 },
    { 60,   0, 38, 100 },
    { 60,   0, 50, 100 },
    { 60,   0, 46,  55 },
    { 60,   0, 39,  55 },
    { 60,   0, 51,  55 },
    { 60,   0, 46,  82 },
    { 60,   0, 39,  82 },
    { 60,   0, 51,  82 },
    { 60,   0, 46, 110 },
    { 60,   0, 39, 110 },
    { 60,   0, 51, 110 },
    { 60,   0, 47,   9 },
    { 60,   0, 40,   9 },
    { 60,   0, 52,   9 },
    { 60,   0, 47, 110 },
    { 60,   0, 40, 110 },
    { 60,   0, 52, 110 },
    { 60,   0, 47,  91 },
    { 60,   0, 40,  91 },
    { 60,   0, 52,  91 },
    { 60,   0, 46,  27 },
    { 60,   0, 39,  27 },
    { 60,   0, 51,  27 },
    { 60,   0, 45,  55 },
    { 60,   0, 50,  55 },
    { 60,   0, 38,  55 },
    { 60,   0, 45,  18 },
    { 60,   0, 50,  18 },
    { 60,   0, 38,  18 },
    { 60,   0, 44,  91 },
    { 60,   0, 49,  91 },
    { 60,   0, 37,  91 },
    { 60,   0, 43,  64 },
    { 60,   0, 36,  64 },
    { 60,   0, 48,  64 },
    { 60,   0, 43, 110 },
    { 60,   0, 36, 110 },
    { 60,   0, 48, 110 },
    { 60,   0, 45,   0 },
    { 60,   0, 50,   0 },
    { 60,   0, 44,  18 },
    { 60,   0, 37,  18 },
    { 60,   0, 49,  18 },
    { 60,   0, 43,  82 },
    { 60,   0, 36,  82 },
    { 60,   0, 48,  82 },
    { 60,   0, 43,  46 },
    { 60,   0, 36,  46 },
    { 60,   0, 48,  46 },
    { 60,   0, 60,  18 },
    { 60,   0, 60,  37 },
    { 60,   0, 60,  91 },
    { 60,   0, 60, 119 },
    { 60,   0, 61,  18 },
    { 60,   0, 61,  91 },
    { 60,   0, 62,  18 },
    { 60,   0, 62,  55 },
    { 60,   0, 61,  27 },
    { 60,   0, 61,  55 },
    { 60,   0, 61,  64 },
    { 60,   0, 61,  82 },
    { 60,   0, 61, 101 },
    { 60,   0, 61, 119 },
    { 60,   0, 62,  27 },
    { 60,   0, 62,  46 },
    { 60,   0, 62,  73 },
    { 60,   0, 62, 100 },
    { 60,   0, 63,  55 },
    { 60,   0, 63,  82 },
    { 60,   0, 63, 110 },
    { 60,   0, 64,   9 },
    { 60,   0, 64, 110 },
    { 60,   0, 64,  91 },
    { 60,   0, 63,  27 },
    { 60,   0, 60,  64 },
    { 60,   0, 60, 110 },
    { 60,   0, 60,  82 },
    { 60,   0, 60,  46 },
    { 60,   0, 72,  18 },
    { 60,   0, 53,  18 },
    { 60,   0, 72,  37 },
    { 60,   0, 53,  37 },
    { 60,   0, 72,  55 },
    { 60,   0, 53,  55 },
    { 60,   0, 72,  73 },
    { 60,   0, 53,  73 },
    { 60,   0, 72,  91 },
    { 60,   0, 53,  91 },
    { 60,   0, 72, 119 },
    { 60,   0, 53, 119 },
    { 60,   0, 73,   9 },
    { 60,   0, 54,   9 },
    { 60,   0, 73,  27 },
    { 60,   0, 54,  27 },
    { 60,   0, 73,  37 },
    { 60,   0, 54,  37 },
    { 60,   0, 73,  55 },
    { 60,   0, 54,  55 },
    { 60,   0, 73,  64 },
    { 60,   0, 54,  64 },
    { 60,   0, 73,  82 },
    { 60,   0, 54,  82 },
    { 60,   0, 73, 101 },
    { 60,   0, 54, 101 },
    { 60,   0, 73, 119 },
    { 60,   0, 54, 119 },
    { 60,   0, 74,   9 },
    { 60,   0, 55,   9 },
    { 60,   0, 74,  27 },
    { 60,   0, 55,  27 },
    { 60,   0, 74,  46 },
    { 60,   0, 55,  46 },
    { 60,   0, 74,  64 },
    { 60,   0, 55,  64 },
    { 60,   0, 74,  73 },
    { 60,   0, 55,  73 },
    { 60,   0, 74,  91 },
    { 60,   0, 55,  91 },
    { 60,   0, 74, 100 },
    { 60,   0, 55, 100 },
    { 60,   0, 74, 119 },
    { 60,   0, 55, 119 },
    { 60,   0, 75,   9 },
    { 60,   0, 56,   9 },
    { 60,   0, 75,  18 },
    { 60,   0, 56,  18 },
    { 60,   0, 75,  36 },
    { 60,   0, 56,  36 },
    { 60,   0, 75,  55 },
    { 60,   0, 56,  55 },
    { 60,   0, 75,  73 },
    { 60,   0, 56,  73 },
    { 60,   0, 75,  82 },
    { 60,   0, 56,  82 },
    { 60,   0, 75, 100 },
    { 60,   0, 56, 100 },
    { 60,   0, 75, 110 },
    { 60,   0, 56, 110 },
    { 60,   0, 76,   0 },
    { 60,   0, 57,   0 },
    { 60,   0, 76,   9 },
    { 60,   0, 57,   9 },
    { 60,   0, 76,  27 },
    { 60,   0, 57,  27 },
    { 60,   0, 76,  36 },
    { 60,   0, 57,  36 },
    { 60,   0, 76,  55 },
    { 60,   0, 57,  55 },
    { 60,   0, 76,  64 },
    { 60,   0, 57,  64 },
    { 60,   0, 76,  82 },
    { 60,   0, 57,  82 },
    { 60,   0, 76, 100 },
    { 60,   0, 57, 100 },
    { 60,   0, 76, 110 },
    { 60,   0, 57, 110 },
    { 60,   0, 77,   0 },
    { 60,   0, 58,   0 },
    { 60,   0, 76,  91 },
    { 60,   0, 57,  91 },
    { 60,   0, 76,  73 },
    { 60,   0, 57,  73 },
    { 60,   0, 75,  27 },
    { 60,   0, 56,  27 },
    { 60,   0, 74,  82 },
    { 60,   0, 55,  82 },
    { 60,   0, 74,  55 },
    { 60,   0, 55,  55 },
    { 60,   0, 74,  37 },
    { 60,   0, 55,  37 },
    { 60,   0, 74,  18 },
    { 60,   0, 55,  18 },
    { 60,   0, 73,  91 },
    { 60,   0, 54,  91 },
    { 60,   0, 72, 101 },
    { 60,   0, 53, 101 },
    { 60,   0, 72,  27 },
    { 60,   0, 53,  27 },
    { 60,   0, 72,   9 },
    { 60,   0, 53,   9 },
    { 60,   0, 72,  64 },
    { 60,   0, 53,  64 },
    { 60,   0, 72, 110 },
    { 60,   0, 53, 110 },
    { 60,   0, 73, 110 },
    { 60,   0, 54, 110 },
    { 60,   0, 74,   0 },
    { 60,   0, 73,  18 },
    { 60,   0, 54,  18 },
    { 60,   0, 72,  82 },
    { 60,   0, 53,  82 },
    { 60,   0, 72,  46 },
    { 60,   0, 53,  46 },
    { 60,   0, 54,   0 },
    { 60,   0, 54,  46 },
    { 60,   0, 54,  73 },
    { 60,   0, 55, 110 },
    { 60,   0, 56,   0 },
    { 60,   0, 56,  46 },
    { 60,   0, 56,  64 },
    { 60,   0, 56, 119 },
    { 60,   0, 57,  18 },
    { 60,   0, 57,  46 },
    { 60,   0, 57, 119 },
    { 68,  53, 48,   0 },
    { 68,  53, 36,   0 },
    { 60,   0, 68,   0 },
    { 60,   0, 59,   0 },
    { 68,  53, 60,   0 },
    { 68,  53, 55,   0 },
    { 68,  53, 43,   0 },
    { 68,  53, 33,   0 },
    { 60,   0, 71,   0 },
    { 68,  53, 31,   0 },
    { 68,  53, 38,   0 },
    { 68,  53, 79,   0 },
    { 68,  53, 72,   0 },
    { 68,  53, 74,   0 },
    { 68,  53, 75,   0 },
    { 68,  53, 63,   0 },
    { 68,  53, 62,   0 },
    { 68,  53, 68,   0 },
    { 68,  53, 67,   0 },
    { 68,  53, 50,   0 },
    { 60,   0, 35,   0 },
    { 68,  53, 51,   0 },
    { 60,   0, 31,   0 },
    { 60,   0, 33,   0 },
    { 68,  53, 29,   0 },
    { 68,  53, 28,   0 },
    { 68,  53, 41,   0 },
    { 68,  53, 44,   0 },
    { 60,   0, 80,   0 },
    { 68,  53, 65,   0 },
    { 60,   0, 75,   0 },
    { 68,  53, 59,   0 },
    { 68,  53, 69,   0 },
    { 68,  53, 53,   0 },
    { 68,  53, 56,   0 },
    { 68,  53, 58,   0 },
    { 68,  53, 80,   0 },
    { 60,   0, 28,   0 },
    { 68,  53, 57,   0 },
    { 60,   0, 52,   8 },
    { 60,   0, 88,  28 },
    { 60,   0, 76,  28 },
    { 60,   0, 64,  28 },
    { 60,   0, 95,  28 },
    { 60,   0, 52,  28 },
    { 60,   0, 87, 126 },
    { 60,   0, 75, 126 },
    { 60,   0, 63, 126 },
    { 60,   0, 94, 126 },
    { 60,   0, 51, 126 },
    { 60,   0, 87, 106 },
    { 60,   0, 75, 106 },
    { 60,   0, 63, 106 },
    { 60,   0, 94, 106 },
    { 60,   0, 51, 106 },
    { 60,   0, 87,  76 },
    { 60,   0, 75,  76 },
    { 60,   0, 63,  76 },
    { 60,   0, 94,  76 },
    { 60,   0, 51,  76 },
    { 60,   0, 87,  56 },
    { 60,   0, 75,  56 },
    { 60,   0, 63,  56 },
    { 60,   0, 94,  56 },
    { 60,   0, 51,  56 },
    { 60,   0, 87,  36 },
    { 60,   0, 94,  36 },
    { 60,   0, 87,  16 },
    { 60,   0, 75,  16 },
    { 60,   0, 63,  16 },
    { 60,   0, 94,  16 },
    { 60,   0, 51,  16 },
    { 60,   0, 86, 124 },
    { 60,   0, 74, 124 },
    { 60,   0, 62, 124 },
    { 60,   0, 93, 124 },
    { 60,   0, 50, 124 },
    { 60,   0, 86,  84 },
    { 60,   0, 74,  84 },
    { 60,   0, 62,  84 },
    { 60,   0, 93,  84 },
    { 60,   0, 50,  84 },
    { 60,   0, 86,  54 },
    { 60,   0, 74,  54 },
    { 60,   0, 62,  54 },
    { 60,   0, 93,  54 },
    { 60,   0, 50,  54 },
    { 60,   0, 86,  34 },
    { 60,   0, 74,  34 },
    { 60,   0, 62,  34 },
    { 60,   0, 93,  34 },
    { 60,   0, 50,  34 },
    { 60,   0, 86,   4 },
    { 60,   0, 74,   4 },
    { 60,   0, 62,   4 },
    { 60,   0, 93,   4 },
    { 60,   0, 50,   4 },
    { 60,   0, 85, 102 },
    { 60,   0, 73, 102 },
    { 60,   0, 61, 102 },
    { 60,   0, 92, 102 },
    { 60,   0, 49, 102 },
    { 60,   0, 85,  72 },
    { 60,   0, 73,  72 },
    { 60,   0, 61,  72 },
    { 60,   0, 92,  72 },
    { 60,   0, 49,  72 },
    { 60,   0, 85,  52 },
    { 60,   0, 73,  52 },
    { 60,   0, 61,  52 },
    { 60,   0, 92,  52 },
    { 60,   0, 49,  52 },
    { 60,   0, 85,  32 },
    { 60,   0, 73,  32 },
    { 60,   0, 61,  32 },
    { 60,   0, 92,  32 },
    { 60,   0, 49,  32 },
    { 60,   0, 85,   2 },
    { 60,   0, 73,   2 },
    { 60,   0, 61,   2 },
    { 60,   0, 92,   2 },
    { 60,   0, 49,   2 },
    { 60,   0, 84, 110 },
    { 60,   0, 91, 110 },
    { 60,   0, 84,  90 },
    { 60,   0, 72,  90 },
    { 60,   0, 60,  90 },
    { 60,   0, 91,  90 },
    { 60,   0, 48,  90 },
    { 72,   0, 51,   0 },
    { 60,   0, 72,  70 },
    { 60,   0, 60,  70 },
    { 60,   0, 91,  70 },
    { 60,   0, 48,  70 },
    { 60,   0, 72,  50 },
    { 60,   0, 60,  50 },
    { 60,   0, 91,  50 },
    { 60,   0, 48,  50 },
    { 60,   0, 72,  10 },
    { 60,   0, 60,  10 },
    { 60,   0, 91,  10 },
    { 60,   0, 48,  10 },
    { 60,   0, 71,  98 },
    { 60,   0, 59,  98 },
    { 60,   0, 90,  98 },
    { 60,   0, 47,  98 },
    { 60,   0, 71,  68 },
    { 60,   0, 59,  68 },
    { 60,   0, 90,  68 },
    { 60,   0, 47,  68 },
    { 60,   0, 71,  48 },
    { 60,   0, 59,  48 },
    { 60,   0, 90,  48 },
    { 60,   0, 47,  48 },
    { 60,   0, 71,  28 },
    { 60,   0, 59,  28 },
    { 60,   0, 90,  28 },
    { 60,   0, 47,  28 },
    { 60,   0, 70, 116 },
    { 60,   0, 58, 116 },
    { 60,   0, 89, 116 },
    { 60,   0, 46, 116 },
    { 60,   0, 70,  86 },
    { 60,   0, 58,  86 },
    { 60,   0, 89,  86 },
    { 60,   0, 46,  86 },
    { 60,   0, 70,  26 },
    { 60,   0, 58,  26 },
    { 60,   0, 89,  26 },
    { 60,   0, 46,  26 },
    { 60,   0, 69, 124 },
    { 60,   0, 57, 124 },
    { 60,   0, 88, 124 },
    { 60,   0, 45, 124 },
    { 60,   0, 69,  84 },
    { 60,   0, 57,  84 },
    { 60,   0, 88,  84 },
    { 60,   0, 45,  84 },
    { 60,   0, 69,  64 },
    { 60,   0, 88,  64 },
    { 60,   0, 69,  44 },
    { 60,   0, 57,  44 },
    { 60,   0, 88,  44 },
    { 60,   0, 45,  44 },
    { 60,   0, 69,  34 },
    { 60,   0, 57,  34 },
    { 60,   0, 88,  34 },
    { 60,   0, 45,  34 },
    { 60,   0, 69,  24 },
    { 60,   0, 57,  24 },
    { 60,   0, 88,  24 },
    { 60,   0, 45,  24 },
    { 60,   0, 69,   4 },
    { 60,   0, 57,   4 },
    { 60,   0, 88,   4 },
    { 60,   0, 45,   4 },
    { 60,   0, 68, 112 },
    { 60,   0, 56, 112 },
    { 60,   0, 87, 112 },
    { 60,   0, 44, 112 },
    { 60,   0, 68,  82 },
    { 60,   0, 87,  82 },
    { 60,   0, 68,  62 },
    { 60,   0, 56,  62 },
    { 60,   0, 87,  62 },
    { 60,   0, 44,  62 },
    { 60,   0, 68,  52 },
    { 60,   0, 56,  52 },
    { 60,   0, 87,  52 },
    { 60,   0, 44,  52 },
    { 60,   0, 68,  32 },
    { 60,   0, 56,  32 },
    { 60,   0, 87,  32 },
    { 60,   0, 44,  32 },
    { 60,   0, 68,  22 },
    { 60,   0, 56,  22 },
    { 60,   0, 87,  22 },
    { 60,   0, 44,  22 },
    { 60,   0, 68,   2 },
    { 60,   0, 56,   2 },
    { 60,   0, 87,   2 },
    { 60,   0, 44,   2 },
    { 60,   0, 67, 100 },
    { 60,   0, 86, 100 },
    { 60,   0, 43, 100 },
    { 60,   0, 67,  70 },
    { 60,   0, 55,  70 },
    { 60,   0, 86,  70 },
    { 60,   0, 43,  70 },
    { 60,   0, 67,  50 },
    { 60,   0, 55,  50 },
    { 60,   0, 86,  50 },
    { 60,   0, 43,  50 },
    { 60,   0, 67,  30 },
    { 60,   0, 55,  30 },
    { 60,   0, 86,  30 },
    { 60,   0, 43,  30 },
    { 60,   0, 67,  60 },
    { 60,   0, 55,  60 },
    { 60,   0, 86,  60 },
    { 60,   0, 43,  60 },
    { 60,   0, 68, 102 },
    { 60,   0, 56, 102 },
    { 60,   0, 87, 102 },
    { 60,   0, 44, 102 },
    { 60,   0, 69,  74 },
    { 60,   0, 57,  74 },
    { 60,   0, 88,  74 },
    { 60,   0, 45,  74 },
    { 60,   0, 69, 104 },
    { 60,   0, 57, 104 },
    { 60,   0, 88, 104 },
    { 60,   0, 45, 104 },
    { 60,   0, 70,   6 },
    { 60,   0, 58,   6 },
    { 60,   0, 89,   6 },
    { 60,   0, 46,   6 },
    { 60,   0, 70,  36 },
    { 60,   0, 58,  36 },
    { 60,   0, 89,  36 },
    { 60,   0, 70,  66 },
    { 60,   0, 58,  66 },
    { 60,   0, 89,  66 },
    { 60,   0, 46,  66 },
    { 60,   0, 70, 106 },
    { 60,   0, 58, 106 },
    { 60,   0, 89, 106 },
    { 60,   0, 46, 106 },
    { 60,   0, 71,  18 },
    { 60,   0, 59,  18 },
    { 60,   0, 90,  18 },
    { 60,   0, 71,  58 },
    { 60,   0, 59,  58 },
    { 60,   0, 90,  58 },
    { 60,   0, 47,  58 },
    { 60,   0, 71, 108 },
    { 60,   0, 59, 108 },
    { 60,   0, 90, 108 },
    { 60,   0, 47, 108 },
    { 60,   0, 72,  30 },
    { 60,   0, 60,  30 },
    { 60,   0, 91,  30 },
    { 60,   0, 48,  30 },
    { 60,   0, 72, 100 },
    { 60,   0, 60, 100 },
    { 60,   0, 91, 100 },
    { 60,   0, 48, 100 },
    { 60,   0, 73,  12 },
    { 60,   0, 61,  12 },
    { 60,   0, 92,  12 },
    { 60,   0, 49,  12 },
    { 60,   0, 92,  82 },
    { 60,   0, 74,  24 },
    { 60,   0, 62,  24 },
    { 60,   0, 93,  24 },
    { 60,   0, 50,  24 },
    { 60,   0, 74,  44 },
    { 60,   0, 62,  44 },
    { 60,   0, 93,  44 },
    { 60,   0, 50,  44 },
    { 60,   0, 93,  64 },
    { 60,   0, 74,  94 },
    { 60,   0, 62,  94 },
    { 60,   0, 93,  94 },
    { 60,   0, 50,  94 },
    { 60,   0, 74, 114 },
    { 60,   0, 62, 114 },
    { 60,   0, 93, 114 },
    { 60,   0, 50, 114 },
    { 60,   0, 75,  46 },
    { 60,   0, 94,  46 },
    { 60,   0, 75,  96 },
    { 60,   0, 63,  96 },
    { 60,   0, 94,  96 },
    { 60,   0, 51,  96 },
    { 60,   0, 75, 116 },
    { 60,   0, 63, 116 },
    { 60,   0, 94, 116 },
    { 60,   0, 51, 116 },
    { 60,   0, 76,   8 },
    { 60,   0, 64,   8 },
    { 60,   0, 95,   8 },
    { 60,   0, 76,  48 },
    { 60,   0, 64,  48 },
    { 60,   0, 95,  48 },
    { 60,   0, 52,  48 },
    { 60,   0, 74,  14 },
    { 60,   0, 62,  14 },
    { 60,   0, 93,  14 },
    { 60,   0, 50,  14 },
    { 60,   0, 73,  42 },
    { 60,   0, 61,  42 },
    { 60,   0, 92,  42 },
    { 60,   0, 49,  42 },
    { 60,   0, 72,  40 },
    { 60,   0, 60,  40 },
    { 60,   0, 91,  40 },
    { 60,   0, 48,  40 },
    { 60,   0, 72,  20 },
    { 60,   0, 60,  20 },
    { 60,   0, 91,  20 },
    { 60,   0, 48,  20 },
    { 60,   0, 72, 120 },
    { 60,   0, 60, 120 },
    { 60,   0, 91, 120 },
    { 60,   0, 48, 120 },
    { 60,   0, 73, 112 },
    { 60,   0, 61, 112 },
    { 60,   0, 92, 112 },
    { 60,   0, 49, 112 },
    { 60,   0, 75,   6 },
    { 60,   0, 63,   6 },
    { 60,   0, 94,   6 },
    { 60,   0, 51,   6 },
    { 60,   0, 75,  66 },
    { 60,   0, 63,  66 },
    { 60,   0, 94,  66 },
    { 60,   0, 51,  66 },
    { 60,   0, 76,  78 },
    { 60,   0, 64,  78 },
    { 60,   0, 95,  78 },
    { 60,   0, 52,  78 },
    { 60,   0, 76, 108 },
    { 60,   0, 64, 108 },
    { 60,   0, 95, 108 },
    { 60,   0, 52, 108 },
    { 60,   0, 75,  26 },
    { 60,   0, 63,  26 },
    { 60,   0, 94,  26 },
    { 60,   0, 51,  26 },
    { 60,   0, 73, 122 },
    { 60,   0, 61, 122 },
    { 60,   0, 92, 122 },
    { 60,   0, 49, 122 },
    { 60,   0, 73,  62 },
    { 60,   0, 61,  62 },
    { 60,   0, 92,  62 },
    { 60,   0, 49,  62 },
    { 60,   0, 73,  22 },
    { 60,   0, 61,  22 },
    { 60,   0, 92,  22 },
    { 60,   0, 49,  22 },
    { 60,   0, 72,  60 },
    { 60,   0, 60,  60 },
    { 60,   0, 91,  60 },
    { 60,   0, 48,  60 },
    { 60,   0, 72,  80 },
    { 60,   0, 60,  80 },
    { 60,   0, 91,  80 },
    { 60,   0, 48,  80 },
    { 60,   0, 73,  92 },
    { 60,   0, 61,  92 },
    { 60,   0, 92,  92 },
    { 60,   0, 49,  92 },
    { 60,   0, 71, 118 },
    { 60,   0, 59, 118 },
    { 60,   0, 90, 118 },
    { 60,   0, 47, 118 },
    { 60,   0, 71,  78 },
    { 60,   0, 59,  78 },
    { 60,   0, 90,  78 },
    { 60,   0, 47,  78 },
    { 60,   0, 71,  38 },
    { 60,   0, 59,  38 },
    { 60,   0, 90,  38 },
    { 60,   0, 47,  38 },
    { 60,   0, 71,   8 },
    { 60,   0, 59,   8 },
    { 60,   0, 90,   8 },
    { 60,   0, 47,   8 },
    { 60,   0, 70, 126 },
    { 60,   0, 58, 126 },
    { 60,   0, 89, 126 },
    { 60,   0, 46, 126 },
    { 60,   0, 70,  76 },
    { 60,   0, 58,  76 },
    { 60,   0, 89,  76 },
    { 60,   0, 46,  76 },
    { 60,   0, 70,  16 },
    { 60,   0, 58,  16 },
    { 60,   0, 89,  16 },
    { 60,   0, 46,  16 },
    { 60,   0, 69,  94 },
    { 60,   0, 57,  94 },
    { 60,   0, 88,  94 },
    { 60,   0, 45,  94 },
    { 60,   0, 69,  54 },
    { 60,   0, 57,  54 },
    { 60,   0, 88,  54 },
    { 60,   0, 45,  54 },
    { 60,   0, 69,  14 },
    { 60,   0, 57,  14 },
    { 60,   0, 88,  14 },
    { 60,   0, 45,  14 },
    { 60,   0, 68, 122 },
    { 60,   0, 56, 122 },
    { 60,   0, 87, 122 },
    { 60,   0, 44, 122 },
    { 60,   0, 68,  92 },
    { 60,   0, 56,  92 },
    { 60,   0, 87,  92 },
    { 60,   0, 44,  92 },
    { 60,   0, 67,  90 },
    { 60,   0, 55,  90 },
    { 60,   0, 86,  90 },
    { 60,   0, 43,  90 },
    { 60,   0, 67,  80 },
    { 60,   0, 55,  80 },
    { 60,   0, 86,  80 },
    { 60,   0, 43,  80 },
    { 60,   0, 68,  72 },
    { 60,   0, 56,  72 },
    { 60,   0, 87,  72 },
    { 60,   0, 44,  72 },
    { 60,   0, 69, 114 },
    { 60,   0, 57, 114 },
    { 60,   0, 88, 114 },
    { 60,   0, 45, 114 },
    { 60,   0, 70,  46 },
    { 60,   0, 58,  46 },
    { 60,   0, 89,  46 },
    { 60,   0, 74,  74 },
    { 60,   0, 62,  74 },
    { 60,   0, 93,  74 },
    { 60,   0, 50,  74 },
    { 60,   0, 74, 104 },
    { 60,   0, 62, 104 },
    { 60,   0, 93, 104 },
    { 60,   0, 50, 104 },
    { 60,   0, 76,  18 },
    { 60,   0, 95,  18 },
    { 60,   0, 76,  38 },
    { 60,   0, 64,  38 },
    { 60,   0, 95,  38 },
    { 60,   0, 52,  38 },
    { 60,   0, 76,  58 },
    { 60,   0, 64,  58 },
    { 60,   0, 95,  58 },
    { 60,   0, 52,  58 },
    { 60,   0, 76,  88 },
    { 60,   0, 64,  88 },
    { 60,   0, 95,  88 },
    { 60,   0, 52,  88 },
    { 60,   0, 76,  98 },
    { 60,   0, 64,  98 },
    { 60,   0, 95,  98 },
    { 60,   0, 52,  98 },
    { 60,   0, 76, 118 },
    { 60,   0, 64, 118 },
    { 60,   0, 95, 118 },
    { 60,   0, 52, 118 },
    { 60,   0, 76,  68 },
    { 60,   0, 64,  68 },
    { 60,   0, 95,  68 },
    { 60,   0, 52,  68 },
    { 60,   0, 103,   0 },
    { 60,   0, 103,  20 },
    { 60,   0, 103,  40 },
    { 60,   0, 103,  50 },
    { 60,   0, 103,  60 },
    { 60,   0, 103,  70 },
    { 60,   0, 103,  80 },
    { 60,   0, 103,  90 },
    { 60,   0, 103, 110 },
    { 60,   0, 104,   2 },
    { 60,   0, 104,  12 },
    { 60,   0, 104,  22 },
    { 60,   0, 104,  32 },
    { 60,   0, 104,  42 },
    { 60,   0, 104,  52 },
    { 60,   0, 104,  62 },
    { 60,   0, 104,  72 },
    { 60,   0, 104,  82 },
    { 60,   0, 104,  92 },
    { 60,   0, 104, 102 },
    { 60,   0, 104, 112 },
    { 60,   0, 104, 122 },
    { 60,   0, 105,   4 },
    { 60,   0, 105,  14 },
    { 60,   0, 105,  24 },
    { 60,   0, 105,  34 },
    { 60,   0, 105,  44 },
    { 60,   0, 105,  54 },
    { 60,   0, 105,  64 },
    { 60,   0, 105,  74 },
    { 60,   0, 105,  84 },
    { 60,   0, 105,  94 },
    { 60,   0, 105, 104 },
    { 60,   0, 105, 114 },
    { 60,   0, 105, 124 },
    { 60,   0, 106,   6 },
    { 60,   0, 106,  16 },
    { 60,   0, 106,  26 },
    { 60,   0, 106,  36 },
    { 60,   0, 106,  46 },
    { 60,   0, 106,  56 },
    { 60,   0, 106,  66 },
    { 60,   0, 106,  76 },
    { 60,   0, 106,  86 },
    { 60,   0, 75,  86 },
    { 60,   0, 63,  86 },
    { 60,   0, 94,  86 },
    { 60,   0, 51,  86 },
    { 60,   0, 106,  96 },
    { 60,   0, 106, 106 },
    { 60,   0, 106, 116 },
    { 60,   0, 106, 126 },
    { 60,   0, 107,   8 },
    { 60,   0, 107,  38 },
    { 60,   0, 107,  48 },
    { 60,   0, 107,  58 },
    { 60,   0, 107,  68 },
    { 60,   0, 107,  78 },
    { 60,   0, 107,  88 },
    { 60,   0, 107,  98 },
    { 60,   0, 107, 108 },
    { 60,   0, 107,  28 },
    { 60,   0, 107,  18 },
    { 60,   0, 103, 120 },
    { 60,   0, 103,  30 },
    { 60,   0, 103,  10 },
    { 60,   0, 99,   0 },
    { 72,   0, 44,   0 },
    { 60,   0, 102, 118 },
    { 60,   0, 98, 118 },
    { 60,   0, 102, 108 },
    { 60,   0, 98, 108 },
    { 60,   0, 102,  88 },
    { 60,   0, 47,  88 },
    { 60,   0, 98,  88 },
    { 60,   0, 102,  68 },
    { 60,   0, 98,  68 },
    { 60,   0, 102,  58 },
    { 60,   0, 98,  58 },
    { 60,   0, 102,  38 },
    { 60,   0, 98,  38 },
    { 60,   0, 102,  28 },
    { 60,   0, 98,  28 },
    { 60,   0, 102,  18 },
    { 60,   0, 98,  18 },
    { 60,   0, 102,   8 },
    { 60,   0, 98,   8 },
    { 60,   0, 101, 126 },
    { 60,   0, 97, 126 },
    { 60,   0, 101, 106 },
    { 60,   0, 97, 106 },
    { 60,   0, 101,  86 },
    { 60,   0, 97,  86 },
    { 60,   0, 101,  66 },
    { 60,   0, 97,  66 },
    { 60,   0, 101,  56 },
    { 60,   0, 46,  56 },
    { 60,   0, 97,  56 },
    { 60,   0, 101,  26 },
    { 60,   0, 97,  26 },
    { 60,   0, 101,  16 },
    { 60,   0, 97,  16 },
    { 60,   0, 100, 124 },
    { 60,   0, 96, 124 },
    { 60,   0, 100, 114 },
    { 60,   0, 96, 114 },
    { 60,   0, 100, 104 },
    { 60,   0, 96, 104 },
    { 60,   0, 100,  94 },
    { 60,   0, 96,  94 },
    { 60,   0, 100,  84 },
    { 60,   0, 96,  84 },
    { 60,   0, 100,  54 },
    { 60,   0, 96,  54 },
    { 60,   0, 100,  44 },
    { 60,   0, 96,  44 },
    { 60,   0, 100,  34 },
    { 60,   0, 96,  34 },
    { 60,   0, 100,   4 },
    { 60,   0, 96,   4 },
    { 60,   0, 99, 122 },
    { 60,   0, 95, 122 },
    { 60,   0, 99, 112 },
    { 60,   0, 95, 112 },
    { 60,   0, 99, 102 },
    { 60,   0, 95, 102 },
    { 60,   0, 99,  92 },
    { 60,   0, 95,  92 },
    { 60,   0, 99,  82 },
    { 60,   0, 95,  82 },
    { 60,   0, 99,  62 },
    { 60,   0, 95,  62 },
    { 60,   0, 99,  42 },
    { 60,   0, 44,  42 },
    { 60,   0, 95,  42 },
    { 60,   0, 99,  22 },
    { 60,   0, 95,  22 },
    { 60,   0, 99,  12 },
    { 60,   0, 44,  12 },
    { 60,   0, 95,  12 },
    { 60,   0, 98, 110 },
    { 60,   0, 94, 110 },
    { 60,   0, 98, 100 },
    { 60,   0, 94, 100 },
    { 60,   0, 98,  80 },
    { 60,   0, 94,  80 },
    { 60,   0, 99,   2 },
    { 60,   0, 95,   2 },
    { 60,   0, 99,  32 },
    { 60,   0, 95,  32 },
    { 60,   0, 99,  52 },
    { 60,   0, 95,  52 },
    { 60,   0, 99,  72 },
    { 60,   0, 95,  72 },
    { 60,   0, 100,  24 },
    { 60,   0, 96,  24 },
    { 60,   0, 100,  64 },
    { 60,   0, 96,  64 },
    { 60,   0, 100,  74 },
    { 60,   0, 96,  74 },
    { 60,   0, 101,   6 },
    { 60,   0, 97,   6 },
    { 60,   0, 101,  46 },
    { 60,   0, 97,  46 },
    { 60,   0, 102,  78 },
    { 60,   0, 98,  78 },
    { 60,   0, 96,  10 },
    { 60,   0, 99,  10 },
    { 60,   0, 96,  20 },
    { 60,   0, 99,  20 },
    { 60,   0, 96,  30 },
    { 60,   0, 99,  30 },
    { 60,   0, 96,  40 },
    { 60,   0, 99,  40 },
    { 60,   0, 96,  50 },
    { 60,   0, 99,  50 },
    { 60,   0, 96,  60 },
    { 60,   0, 99,  60 },
    { 60,   0, 96,  70 },
    { 60,   0, 99,  70 },
    { 60,   0, 96,  90 },
    { 60,   0, 99,  90 },
    { 60,   0, 103, 100 },
    { 60,   0, 96, 100 },
    { 60,   0, 99, 100 },
    { 60,   0, 96, 110 },
    { 60,   0, 99, 110 },
    { 60,   0, 96, 120 },
    { 60,   0, 99, 120 },
    { 60,   0, 97,  12 },
    { 60,   0, 100,  12 },
    { 60,   0, 97,  32 },
    { 60,   0, 100,  32 },
    { 60,   0, 97,  42 },
    { 60,   0, 100,  42 },
    { 60,   0, 97,  52 },
    { 60,   0, 100,  52 },
    { 60,   0, 97,  62 },
    { 60,   0, 100,  62 },
    { 60,   0, 97,  72 },
    { 60,   0, 100,  72 },
    { 60,   0, 97,  92 },
    { 60,   0, 100,  92 },
    { 60,   0, 97, 102 },
    { 60,   0, 100, 102 },
    { 60,   0, 97, 122 },
    { 60,   0, 100, 122 },
    { 60,   0, 98,   4 },
    { 60,   0, 101,   4 },
    { 60,   0, 98,  14 },
    { 60,   0, 101,  14 },
    { 60,   0, 98,  24 },
    { 60,   0, 101,  24 },
    { 60,   0, 98,  34 },
    { 60,   0, 101,  34 },
    { 60,   0, 97,  82 },
    { 60,   0, 100,  82 },
    { 60,   0, 97,  22 },
    { 60,   0, 100,  22 },
    { 60,   0, 96,  80 },
    { 60,   0, 99,  80 },
    { 60,   0, 97,   2 },
    { 60,   0, 100,   2 },
    { 60,   0, 67,  10 },
    { 60,   0, 67,  20 },
    { 60,   0, 67,  40 },
    { 60,   0, 67, 110 },
    { 60,   0, 68,  42 },
    { 60,   0, 97, 112 },
    { 60,   0, 100, 112 },
    { 60,   0, 98,  44 },
    { 60,   0, 101,  44 },
    { 60,   0, 98,  54 },
    { 60,   0, 101,  54 },
    { 60,   0, 98,  64 },
    { 60,   0, 101,  64 },
    { 60,   0, 98,  74 },
    { 60,   0, 101,  74 },
    { 60,   0, 98,  84 },
    { 60,   0, 101,  84 },
    { 60,   0, 98,  94 },
    { 60,   0, 101,  94 },
    { 60,   0, 98, 114 },
    { 60,   0, 101, 114 },
    { 60,   0, 98, 124 },
    { 60,   0, 101, 124 },
    { 60,   0, 99,  16 },
    { 60,   0, 102,  16 },
    { 60,   0, 99,  26 },
    { 60,   0, 102,  26 },
    { 60,   0, 99,  36 },
    { 60,   0, 102,  36 },
    { 60,   0, 99,  46 },
    { 60,   0, 102,  46 },
    { 60,   0, 70,  56 },
    { 60,   0, 99,  56 },
    { 60,   0, 102,  56 },
    { 60,   0, 99,  66 },
    { 60,   0, 102,  66 },
    { 60,   0, 99,  76 },
    { 60,   0, 102,  76 },
    { 60,   0, 99,  86 },
    { 60,   0, 102,  86 },
    { 60,   0, 70,  96 },
    { 60,   0, 99,  96 },
    { 60,   0, 102,  96 },
    { 60,   0, 99, 106 },
    { 60,   0, 102, 106 },
    { 60,   0, 99, 126 },
    { 60,   0, 102, 126 },
    { 60,   0, 100,   8 },
    { 60,   0, 103,   8 },
    { 60,   0, 100,  18 },
    { 60,   0, 103,  18 },
    { 60,   0, 98, 104 },
    { 60,   0, 101, 104 },
    { 60,   0, 67, 120 },
    { 60,   0, 84,  10 },
    { 60,   0, 84,  30 },
    { 60,   0, 84,  40 },
    { 60,   0, 84,  50 },
    { 60,   0, 84,  60 },
    { 60,   0, 84,  70 },
    { 60,   0, 84,  80 },
    { 60,   0, 84, 100 },
    { 60,   0, 68,  12 },
    { 60,   0, 85,  12 },
    { 60,   0, 85,  22 },
    { 60,   0, 85,  92 },
    { 60,   0, 85, 112 },
    { 60,   0, 85, 122 },
    { 60,   0, 86,  14 },
    { 60,   0, 86,  24 },
    { 60,   0, 86,  44 },
    { 60,   0, 86,  74 },
    { 60,   0, 85,  62 },
    { 60,   0, 85,  42 },
    { 60,   0, 84,  20 },
    { 72,   0, 63,   0 },
    { 60,   0, 71,  88 },
    { 60,   0, 59,  88 },
    { 60,   0, 66,  88 },
    { 60,   0, 83,  88 },
    { 60,   0, 90,  88 },
    { 60,   0, 66,  68 },
    { 60,   0, 83,  68 },
    { 60,   0, 66,  58 },
    { 60,   0, 83,  58 },
    { 60,   0, 66,  38 },
    { 60,   0, 83,  38 },
    { 60,   0, 66,  18 },
    { 60,   0, 83,  18 },
    { 60,   0, 65, 126 },
    { 60,   0, 82, 126 },
    { 60,   0, 65, 106 },
    { 60,   0, 82, 106 },
    { 60,   0, 65,  86 },
    { 60,   0, 82,  86 },
    { 60,   0, 58,  56 },
    { 60,   0, 65,  56 },
    { 60,   0, 82,  56 },
    { 60,   0, 89,  56 },
    { 60,   0, 65,  46 },
    { 60,   0, 82,  46 },
    { 60,   0, 65,  26 },
    { 60,   0, 82,  26 },
    { 60,   0, 65,   6 },
    { 60,   0, 82,   6 },
    { 60,   0, 64, 124 },
    { 60,   0, 81, 124 },
    { 60,   0, 64, 104 },
    { 60,   0, 81, 104 },
    { 60,   0, 64,  84 },
    { 60,   0, 81,  84 },
    { 60,   0, 81,  64 },
    { 60,   0, 64,  54 },
    { 60,   0, 81,  54 },
    { 60,   0, 64,  24 },
    { 60,   0, 81,  24 },
    { 60,   0, 64,  14 },
    { 60,   0, 81,  14 },
    { 60,   0, 96,  14 },
    { 60,   0, 63, 122 },
    { 60,   0, 80, 122 },
    { 60,   0, 63, 112 },
    { 60,   0, 80, 112 },
    { 60,   0, 63,  92 },
    { 60,   0, 80,  92 },
    { 60,   0, 80,  82 },
    { 60,   0, 63,  62 },
    { 60,   0, 80,  62 },
    { 60,   0, 63,  52 },
    { 60,   0, 80,  52 },
    { 60,   0, 63,  32 },
    { 60,   0, 80,  32 },
    { 60,   0, 56,  12 },
    { 60,   0, 63,  12 },
    { 60,   0, 80,  12 },
    { 60,   0, 87,  12 },
    { 60,   0, 63,   2 },
    { 60,   0, 80,   2 },
    { 60,   0, 55, 120 },
    { 60,   0, 62, 120 },
    { 60,   0, 79, 120 },
    { 60,   0, 86, 120 },
    { 60,   0, 94, 120 },
    { 60,   0, 79, 110 },
    { 60,   0, 86, 110 },
    { 60,   0, 63,  22 },
    { 60,   0, 80,  22 },
    { 60,   0, 64,   4 },
    { 60,   0, 81,   4 },
    { 60,   0, 64,  34 },
    { 60,   0, 81,  34 },
    { 60,   0, 65,  36 },
    { 60,   0, 82,  36 },
    { 60,   0, 97,  36 },
    { 60,   0, 65,  66 },
    { 60,   0, 82,  66 },
    { 60,   0, 65,  76 },
    { 60,   0, 82,  76 },
    { 60,   0, 97,  76 },
    { 60,   0, 65, 116 },
    { 60,   0, 82, 116 },
    { 60,   0, 97, 116 },
    { 60,   0, 66,   8 },
    { 60,   0, 83,   8 },
    { 60,   0, 66,  48 },
    { 60,   0, 83,  48 },
    { 60,   0, 98,  48 },
    { 60,   0, 66,  78 },
    { 60,   0, 83,  78 },
    { 60,   0, 66,  98 },
    { 60,   0, 83,  98 },
    { 60,   0, 98,  98 },
    { 60,   0, 66, 108 },
    { 60,   0, 83, 108 },
    { 72,   0, 68,   0 },
    { 60,   0, 46,  96 },
    { 60,   0, 43, 120 },
    { 60,   0, 43,  40 },
    { 72,   0, 56,   0 },
    { 72,   0, 79,   0 },
    { 72,   0, 80,   0 },
    { 72,   0, 75,   0 },
    { 72,   0, 39,   0 },
    { 60,   0, 11,   0 },
    { 60,   0, 85,  82 },
    { 60,   0, 86, 114 },
    { 60,   0, 87,  66 },
    { 60,   0, 87,  86 },
    { 60,   0, 88,   8 },
    { 60,   0, 87,   6 },
    { 60,   0, 86, 104 },
    { 60,   0, 86,  64 },
    { 60,   0, 56,  42 },
    { 60,   0, 58,  96 },
    { 60,   0, 84, 120 },
    { 60,   0, 87,  96 },
    { 60,   0, 87,  26 },
    { 60,   0, 83,  28 },
    { 60,   0, 82,  16 },
    { 60,   0, 81, 114 },
    { 60,   0, 81,  44 },
    { 60,   0, 80, 102 },
    { 60,   0, 80,  42 },
    { 60,   0, 87,  42 },
    { 60,   0, 79, 100 },
    { 60,   0, 79,  90 },
    { 60,   0, 79,  80 },
    { 60,   0, 79,  70 },
    { 60,   0, 82,  96 },
    { 60,   0, 89,  96 },
    { 60,   0, 83, 118 },
    { 60,   0, 86,  94 },
    { 84,   0, 28, 118 },
    { 84,   0, 40, 118 },
    { 84,   0, 51, 118 },
    { 84,   0, 28, 116 },
    { 84,   0, 40, 116 },
    { 84,   0, 51, 116 },
    { 84,   0, 28, 112 },
    { 84,   0, 40, 112 },
    { 84,   0, 51, 112 },
    { 84,   0, 28, 110 },
    { 84,   0, 40, 110 },
    { 84,   0, 51, 110 },
    { 84,   0, 28, 108 },
    { 84,   0, 40, 108 },
    { 84,   0, 51, 108 },
    { 84,   0, 28, 106 },
    { 84,   0, 40, 106 },
    { 84,   0, 51, 106 },
    { 84,   0, 28, 102 },
    { 84,   0, 40, 102 },
    { 84,   0, 51, 102 },
    { 84,   0, 28, 100 },
    { 84,   0, 40, 100 },
    { 84,   0, 51, 100 },
    { 84,   0, 28,  98 },
    { 84,   0, 40,  98 },
    { 84,   0, 51,  98 },
    { 84,   0, 28,  96 },
    { 84,   0, 40,  96 },
    { 84,   0, 51,  96 },
    { 84,   0, 28,  92 },
    { 84,   0, 40,  92 },
    { 84,   0, 51,  92 },
    { 84,   0, 28,  88 },
    { 84,   0, 40,  88 },
    { 84,   0, 51,  88 },
    { 84,   0, 28,  86 },
    { 84,   0, 40,  86 },
    { 84,   0, 51,  86 },
    { 84,   0, 28,  82 },
    { 84,   0, 40,  82 },
    { 84,   0, 51,  82 },
    { 84,   0, 28,  80 },
    { 84,   0, 40,  80 },
    { 84,   0, 51,  80 },
    { 84,   0, 28,  78 },
    { 84,   0, 40,  78 },
    { 84,   0, 51,  78 },
    { 84,   0, 28,  76 },
    { 84,   0, 40,  76 },
    { 84,   0, 51,  76 },
    { 84,   0, 28,  74 },
    { 84,   0, 40,  74 },
    { 84,   0, 51,  74 },
    { 84,   0, 28,  72 },
    { 84,   0, 40,  72 },
    { 84,   0, 51,  72 },
    { 84,   0, 28,  70 },
    { 84,   0, 40,  70 },
    { 84,   0, 51,  70 },
    { 84,   0, 28,  68 },
    { 84,   0, 40,  68 },
    { 84,   0, 51,  68 },
    { 84,   0, 28,  66 },
    { 84,   0, 40,  66 },
    { 84,   0, 51,  66 },
    { 84,   0, 28,  64 },
    { 84,   0, 40,  64 },
    { 84,   0, 51,  64 },
    { 84,   0, 28,  60 },
    { 84,   0, 40,  60 },
    { 84,   0, 51,  60 },
    { 84,   0, 28,  56 },
    { 84,   0, 40,  56 },
    { 84,   0, 51,  56 },
    { 84,   0, 28,  52 },
    { 84,   0, 40,  52 },
    { 84,   0, 51,  52 },
    { 84,   0, 28,  48 },
    { 84,   0, 40,  48 },
    { 84,   0, 51,  48 },
    { 84,   0, 28,  44 },
    { 84,   0, 40,  44 },
    { 84,   0, 51,  44 },
    { 84,   0, 28,  40 },
    { 84,   0, 40,  40 },
    { 84,   0, 51,  40 },
    { 84,   0, 28,  36 },
    { 84,   0, 40,  36 },
    { 84,   0, 51,  36 },
    { 84,   0, 28,  34 },
    { 84,   0, 40,  34 },
    { 84,   0, 51,  34 },
    { 84,   0, 28,  30 },
    { 84,   0, 40,  30 },
    { 84,   0, 51,  30 },
    { 84,   0, 28,  28 },
    { 84,   0, 40,  28 },
    { 84,   0, 51,  28 },
    { 84,   0, 28,  26 },
    { 84,   0, 40,  26 },
    { 84,   0, 51,  26 },
    { 84,   0, 28,  20 },
    { 84,   0, 40,  20 },
    { 84,   0, 51,  20 },
    { 84,   0, 28,  16 },
    { 84,   0, 40,  16 },
    { 84,   0, 51,  16 },
    { 84,   0, 28,  14 },
    { 84,   0, 40,  14 },
    { 84,   0, 51,  14 },
    { 84,   0, 28,  12 },
    { 84,   0, 40,  12 },
    { 84,   0, 51,  12 },
    { 84,   0, 28,   8 },
    { 84,   0, 40,   8 },
    { 84,   0, 51,   8 },
    { 84,   0, 28,   6 },
    { 84,   0, 40,   6 },
    { 84,   0, 51,   6 },
    { 84,   0, 28,   2 },
    { 84,   0, 40,   2 },
    { 84,   0, 51,   2 },
    { 84,   0, 28,  10 },
    { 84,   0, 40,  10 },
    { 84,   0, 51,  10 },
    { 84,   0, 28,  22 },
    { 84,   0, 40,  22 },
    { 84,   0, 51,  22 },
    { 84,   0, 28,  24 },
    { 84,   0, 40,  24 },
    { 84,   0, 51,  24 },
    { 84,   0, 28,  32 },
    { 84,   0, 40,  32 },
    { 84,   0, 51,  32 },
    { 84,   0, 28,  38 },
    { 84,   0, 40,  38 },
    { 84,   0, 51,  38 },
    { 84,   0, 28,  42 },
    { 84,   0, 40,  42 },
    { 84,   0, 51,  42 },
    { 84,   0, 28,  46 },
    { 84,   0, 40,  46 },
    { 84,   0, 51,  46 },
    { 84,   0, 28,  58 },
    { 84,   0, 40,  58 },
    { 84,   0, 51,  58 },
    { 84,   0, 28,  62 },
    { 84,   0, 40,  62 },
    { 84,   0, 51,  62 },
    { 84,   0, 28, 104 },
    { 84,   0, 40, 104 },
    { 84,   0, 51, 104 },
    { 84,   0, 28, 122 },
    { 84,   0, 40, 122 },
    { 84,   0, 51, 122 },
    { 84,   0, 28, 126 },
    { 84,   0, 40, 126 },
    { 84,   0, 51, 126 },
    { 84,   0, 29,   0 },
    { 84,   0, 41,   0 },
    { 84,   0, 52,   0 },
    { 84,   0, 56,   0 },
    { 84,   0, 53,   0 },
    { 84,   0, 45,   0 },
    { 84,   0, 33,   0 },
    { 84,   0, 43,   0 },
    { 84,   0, 31,   0 },
    { 84,   0, 28,   0 },
    { 84,   0, 35,   0 },
    { 84,   0, 52,   2 },
    { 84,   0, 47,   2 },
    { 84,   0, 35,   2 },
    { 84,   0, 62,   2 },
    { 84,   0, 67,   2 },
    { 84,   0, 59,   2 },
    { 84,   0, 29,   2 },
    { 84,   0, 41,   2 },
    { 84,   0, 52,   6 },
    { 84,   0, 47,   6 },
    { 84,   0, 35,   6 },
    { 84,   0, 62,   6 },
    { 84,   0, 67,   6 },
    { 84,   0, 59,   6 },
    { 84,   0, 29,   6 },
    { 84,   0, 41,   6 },
    { 84,   0, 52,   8 },
    { 84,   0, 47,   8 },
    { 84,   0, 35,   8 },
    { 84,   0, 62,   8 },
    { 84,   0, 67,   8 },
    { 84,   0, 59,   8 },
    { 84,   0, 29,   8 },
    { 84,   0, 41,   8 },
    { 84,   0, 52,  12 },
    { 84,   0, 47,  12 },
    { 84,   0, 35,  12 },
    { 84,   0, 62,  12 },
    { 84,   0, 67,  12 },
    { 84,   0, 59,  12 },
    { 84,   0, 29,  12 },
    { 84,   0, 41,  12 },
    { 84,   0, 52,  16 },
    { 84,   0, 47,  16 },
    { 84,   0, 35,  16 },
    { 84,   0, 62,  16 },
    { 84,   0, 67,  16 },
    { 84,   0, 59,  16 },
    { 84,   0, 29,  16 },
    { 84,   0, 41,  16 },
    { 84,   0, 52,  20 },
    { 84,   0, 47,  20 },
    { 84,   0, 35,  20 },
    { 84,   0, 62,  20 },
    { 84,   0, 67,  20 },
    { 84,   0, 59,  20 },
    { 84,   0, 29,  20 },
    { 84,   0, 41,  20 },
    { 84,   0, 52,  22 },
    { 84,   0, 47,  22 },
    { 84,   0, 35,  22 },
    { 84,   0, 62,  22 },
    { 84,   0, 67,  22 },
    { 84,   0, 59,  22 },
    { 84,   0, 29,  22 },
    { 84,   0, 41,  22 },
    { 84,   0, 52,  24 },
    { 84,   0, 47,  24 },
    { 84,   0, 35,  24 },
    { 84,   0, 62,  24 },
    { 84,   0, 67,  24 },
    { 84,   0, 59,  24 },
    { 84,   0, 29,  24 },
    { 84,   0, 41,  24 },
    { 84,   0, 52,  26 },
    { 84,   0, 47,  26 },
    { 84,   0, 35,  26 },
    { 84,   0, 62,  26 },
    { 84,   0, 67,  26 },
    { 84,   0, 59,  26 },
    { 84,   0, 29,  26 },
    { 84,   0, 41,  26 },
    { 84,   0, 52,  28 },
    { 84,   0, 47,  28 },
    { 84,   0, 35,  28 },
    { 84,   0, 62,  28 },
    { 84,   0, 67,  28 },
    { 84,   0, 59,  28 },
    { 84,   0, 29,  28 },
    { 84,   0, 41,  28 },
    { 84,   0, 47,  30 },
    { 84,   0, 35,  30 },
    { 84,   0, 62,  30 },
    { 84,   0, 67,  30 },
    { 84,   0, 29,  30 },
    { 84,   0, 41,  30 },
    { 84,   0, 47,  32 },
    { 84,   0, 35,  32 },
    { 84,   0, 62,  32 },
    { 84,   0, 67,  32 },
    { 84,   0, 29,  32 },
    { 84,   0, 41,  32 },
    { 84,   0, 47,  36 },
    { 84,   0, 35,  36 },
    { 84,   0, 62,  36 },
    { 84,   0, 67,  36 },
    { 84,   0, 29,  36 },
    { 84,   0, 41,  36 },
    { 84,   0, 47,  38 },
    { 84,   0, 35,  38 },
    { 84,   0, 62,  38 },
    { 84,   0, 67,  38 },
    { 84,   0, 29,  38 },
    { 84,   0, 41,  38 },
    { 84,   0, 47,  42 },
    { 84,   0, 35,  42 },
    { 84,   0, 62,  42 },
    { 84,   0, 67,  42 },
    { 84,   0, 29,  42 },
    { 84,   0, 41,  42 },
    { 84,   0, 47,  44 },
    { 84,   0, 35,  44 },
    { 84,   0, 62,  44 },
    { 84,   0, 67,  44 },
    { 84,   0, 29,  44 },
    { 84,   0, 41,  44 },
    { 84,   0, 47,  46 },
    { 84,   0, 35,  46 },
    { 84,   0, 62,  46 },
    { 84,   0, 67,  46 },
    { 84,   0, 29,  46 },
    { 84,   0, 41,  46 },
    { 84,   0, 47,  48 },
    { 84,   0, 35,  48 },
    { 84,   0, 62,  48 },
    { 84,   0, 67,  48 },
    { 84,   0, 29,  48 },
    { 84,   0, 41,  48 },
    { 84,   0, 47,  50 },
    { 84,   0, 35,  50 },
    { 84,   0, 62,  50 },
    { 84,   0, 67,  50 },
    { 84,   0, 29,  50 },
    { 84,   0, 41,  50 },
    { 84,   0, 28,  50 },
    { 84,   0, 40,  50 },
    { 84,   0, 47,  52 },
    { 84,   0, 35,  52 },
    { 84,   0, 62,  52 },
    { 84,   0, 67,  52 },
    { 84,   0, 29,  52 },
    { 84,   0, 41,  52 },
    { 84,   0, 47,  54 },
    { 84,   0, 35,  54 },
    { 84,   0, 62,  54 },
    { 84,   0, 67,  54 },
    { 84,   0, 29,  54 },
    { 84,   0, 41,  54 },
    { 84,   0, 28,  54 },
    { 84,   0, 40,  54 },
    { 84,   0, 47,  58 },
    { 84,   0, 35,  58 },
    { 84,   0, 62,  58 },
    { 84,   0, 67,  58 },
    { 84,   0, 29,  58 },
    { 84,   0, 41,  58 },
    { 84,   0, 47,  60 },
    { 84,   0, 35,  60 },
    { 84,   0, 62,  60 },
    { 84,   0, 67,  60 },
    { 84,   0, 29,  60 },
    { 84,   0, 41,  60 },
    { 84,   0, 47,  62 },
    { 84,   0, 35,  62 },
    { 84,   0, 62,  62 },
    { 84,   0, 67,  62 },
    { 84,   0, 29,  62 },
    { 84,   0, 41,  62 },
    { 84,   0, 47,  64 },
    { 84,   0, 35,  64 },
    { 84,   0, 62,  64 },
    { 84,   0, 67,  64 },
    { 84,   0, 29,  64 },
    { 84,   0, 41,  64 },
    { 84,   0, 47,  66 },
    { 84,   0, 35,  66 },
    { 84,   0, 62,  66 },
    { 84,   0, 67,  66 },
    { 84,   0, 29,  66 },
    { 84,   0, 41,  66 },
    { 84,   0, 47,  68 },
    { 84,   0, 35,  68 },
    { 84,   0, 62,  68 },
    { 84,   0, 67,  68 },
    { 84,   0, 29,  68 },
    { 84,   0, 41,  68 },
    { 84,   0, 47,  72 },
    { 84,   0, 35,  72 },
    { 84,   0, 62,  72 },
    { 84,   0, 67,  72 },
    { 84,   0, 29,  72 },
    { 84,   0, 41,  72 },
    { 84,   0, 47,  76 },
    { 84,   0, 35,  76 },
    { 84,   0, 62,  76 },
    { 84,   0, 67,  76 },
    { 84,   0, 29,  76 },
    { 84,   0, 41,  76 },
    { 84,   0, 47,  78 },
    { 84,   0, 35,  78 },
    { 84,   0, 62,  78 },
    { 84,   0, 67,  78 },
    { 84,   0, 29,  78 },
    { 84,   0, 41,  78 },
    { 84,   0, 47,  80 },
    { 84,   0, 35,  80 },
    { 84,   0, 62,  80 },
    { 84,   0, 67,  80 },
    { 84,   0, 29,  80 },
    { 84,   0, 41,  80 },
    { 84,   0, 47,  82 },
    { 84,   0, 35,  82 },
    { 84,   0, 62,  82 },
    { 84,   0, 67,  82 },
    { 84,   0, 29,  82 },
    { 84,   0, 41,  82 },
    { 84,   0, 47,  84 },
    { 84,   0, 35,  84 },
    { 84,   0, 62,  84 },
    { 84,   0, 67,  84 },
    { 84,   0, 29,  84 },
    { 84,   0, 41,  84 },
    { 84,   0, 28,  84 },
    { 84,   0, 40,  84 },
    { 84,   0, 47,  86 },
    { 84,   0, 35,  86 },
    { 84,   0, 62,  86 },
    { 84,   0, 67,  86 },
    { 84,   0, 29,  86 },
    { 84,   0, 41,  86 },
    { 84,   0, 47,  90 },
    { 84,   0, 35,  90 },
    { 84,   0, 62,  90 },
    { 84,   0, 67,  90 },
    { 84,   0, 29,  90 },
    { 84,   0, 41,  90 },
    { 84,   0, 28,  90 },
    { 84,   0, 40,  90 },
    { 84,   0, 47,  92 },
    { 84,   0, 35,  92 },
    { 84,   0, 62,  92 },
    { 84,   0, 67,  92 },
    { 84,   0, 29,  92 },
    { 84,   0, 41,  92 },
    { 84,   0, 47,  94 },
    { 84,   0, 35,  94 },
    { 84,   0, 62,  94 },
    { 84,   0, 67,  94 },
    { 84,   0, 29,  94 },
    { 84,   0, 41,  94 },
    { 84,   0, 28,  94 },
    { 84,   0, 40,  94 },
    { 84,   0, 47,  96 },
    { 84,   0, 35,  96 },
    { 84,   0, 62,  96 },
    { 84,   0, 67,  96 },
    { 84,   0, 29,  96 },
    { 84,   0, 41,  96 },
    { 84,   0, 47,  98 },
    { 84,   0, 35,  98 },
    { 84,   0, 62,  98 },
    { 84,   0, 67,  98 },
    { 84,   0, 29,  98 },
    { 84,   0, 41,  98 },
    { 84,   0, 47, 100 },
    { 84,   0, 35, 100 },
    { 84,   0, 62, 100 },
    { 84,   0, 67, 100 },
    { 84,   0, 29, 100 },
    { 84,   0, 41, 100 },
    { 84,   0, 47, 104 },
    { 84,   0, 35, 104 },
    { 84,   0, 62, 104 },
    { 84,   0, 67, 104 },
    { 84,   0, 29, 104 },
    { 84,   0, 41, 104 },
    { 84,   0, 47, 106 },
    { 84,   0, 35, 106 },
    { 84,   0, 62, 106 },
    { 84,   0, 67, 106 },
    { 84,   0, 29, 106 },
    { 84,   0, 41, 106 },
    { 84,   0, 47, 102 },
    { 84,   0, 35, 102 },
    { 84,   0, 62, 102 },
    { 84,   0, 67, 102 },
    { 84,   0, 29, 102 },
    { 84,   0, 41, 102 },
    { 84,   0, 47,  88 },
    { 84,   0, 35,  88 },
    { 84,   0, 62,  88 },
    { 84,   0, 67,  88 },
    { 84,   0, 29,  88 },
    { 84,   0, 41,  88 },
    { 84,   0, 47,  74 },
    { 84,   0, 35,  74 },
    { 84,   0, 29,  74 },
    { 84,   0, 41,  74 },
    { 84,   0, 47,  56 },
    { 84,   0, 35,  56 },
    { 84,   0, 29,  56 },
    { 84,   0, 41,  56 },
    { 84,   0, 47,  40 },
    { 84,   0, 35,  40 },
    { 84,   0, 29,  40 },
    { 84,   0, 41,  40 },
    { 84,   0, 47,  34 },
    { 84,   0, 35,  34 },
    { 84,   0, 29,  34 },
    { 84,   0, 41,  34 },
    { 84,   0, 47,  18 },
    { 84,   0, 35,  18 },
    { 84,   0, 29,  18 },
    { 84,   0, 41,  18 },
    { 84,   0, 28,  18 },
    { 84,   0, 40,  18 },
    { 84,   0, 47,  10 },
    { 84,   0, 35,  10 },
    { 84,   0, 29,  10 },
    { 84,   0, 41,  10 },
    { 84,   0, 47,   4 },
    { 84,   0, 35,   4 },
    { 84,   0, 29,   4 },
    { 84,   0, 41,   4 },
    { 84,   0, 28,   4 },
    { 84,   0, 40,   4 },
    { 84,   0, 46, 124 },
    { 84,   0, 34, 124 },
    { 84,   0, 28, 124 },
    { 84,   0, 40, 124 },
    { 84,   0, 27, 124 },
    { 84,   0, 39, 124 },
    { 84,   0, 46, 120 },
    { 84,   0, 34, 120 },
    { 84,   0, 28, 120 },
    { 84,   0, 40, 120 },
    { 84,   0, 27, 120 },
    { 84,   0, 39, 120 },
    { 84,   0, 46, 118 },
    { 84,   0, 34, 118 },
    { 84,   0, 27, 118 },
    { 84,   0, 39, 118 },
    { 84,   0, 46, 116 },
    { 84,   0, 34, 116 },
    { 84,   0, 27, 116 },
    { 84,   0, 39, 116 },
    { 84,   0, 46, 114 },
    { 84,   0, 34, 114 },
    { 84,   0, 28, 114 },
    { 84,   0, 40, 114 },
    { 84,   0, 27, 114 },
    { 84,   0, 39, 114 },
    { 84,   0, 46, 110 },
    { 84,   0, 34, 110 },
    { 84,   0, 27, 110 },
    { 84,   0, 39, 110 },
    { 84,   0, 46, 108 },
    { 84,   0, 34, 108 },
    { 84,   0, 27, 108 },
    { 84,   0, 39, 108 },
    { 84,   0, 46, 106 },
    { 84,   0, 34, 106 },
    { 84,   0, 27, 106 },
    { 84,   0, 39, 106 },
    { 84,   0, 46, 104 },
    { 84,   0, 34, 104 },
    { 84,   0, 27, 104 },
    { 84,   0, 39, 104 },
    { 84,   0, 46, 102 },
    { 84,   0, 34, 102 },
    { 84,   0, 27, 102 },
    { 84,   0, 39, 102 },
    { 84,   0, 46,  98 },
    { 84,   0, 34,  98 },
    { 84,   0, 27,  98 },
    { 84,   0, 39,  98 },
    { 84,   0, 46,  96 },
    { 84,   0, 34,  96 },
    { 84,   0, 27,  96 },
    { 84,   0, 39,  96 },
    { 84,   0, 46,  94 },
    { 84,   0, 34,  94 },
    { 84,   0, 27,  94 },
    { 84,   0, 39,  94 },
    { 84,   0, 46,  92 },
    { 84,   0, 34,  92 },
    { 84,   0, 27,  92 },
    { 84,   0, 39,  92 },
    { 84,   0, 46,  90 },
    { 84,   0, 34,  90 },
    { 84,   0, 27,  90 },
    { 84,   0, 39,  90 },
    { 84,   0, 46,  88 },
    { 84,   0, 34,  88 },
    { 84,   0, 27,  88 },
    { 84,   0, 39,  88 },
    { 84,   0, 46,  86 },
    { 84,   0, 34,  86 },
    { 84,   0, 27,  86 },
    { 84,   0, 39,  86 },
    { 84,   0, 46,  84 },
    { 84,   0, 34,  84 },
    { 84,   0, 27,  84 },
    { 84,   0, 39,  84 },
    { 84,   0, 46,  82 },
    { 84,   0, 34,  82 },
    { 84,   0, 27,  82 },
    { 84,   0, 39,  82 },
    { 84,   0, 46,  80 },
    { 84,   0, 34,  80 },
    { 84,   0, 27,  80 },
    { 84,   0, 39,  80 },
    { 84,   0, 46,  76 },
    { 84,   0, 34,  76 },
    { 84,   0, 27,  76 },
    { 84,   0, 39,  76 },
    { 84,   0, 46,  72 },
    { 84,   0, 34,  72 },
    { 84,   0, 27,  72 },
    { 84,   0, 39,  72 },
    { 84,   0, 46,  68 },
    { 84,   0, 34,  68 },
    { 84,   0, 27,  68 },
    { 84,   0, 39,  68 },
    { 84,   0, 46,  64 },
    { 84,   0, 34,  64 },
    { 84,   0, 27,  64 },
    { 84,   0, 39,  64 },
    { 84,   0, 46,  60 },
    { 84,   0, 34,  60 },
    { 84,   0, 27,  60 },
    { 84,   0, 39,  60 },
    { 84,   0, 46,  58 },
    { 84,   0, 34,  58 },
    { 84,   0, 27,  58 },
    { 84,   0, 39,  58 },
    { 84,   0, 46,  56 },
    { 84,   0, 34,  56 },
    { 84,   0, 27,  56 },
    { 84,   0, 39,  56 },
    { 84,   0, 46,  50 },
    { 84,   0, 34,  50 },
    { 84,   0, 27,  50 },
    { 84,   0, 39,  50 },
    { 84,   0, 46,  48 },
    { 84,   0, 34,  48 },
    { 84,   0, 27,  48 },
    { 84,   0, 39,  48 },
    { 84,   0, 46,  46 },
    { 84,   0, 34,  46 },
    { 84,   0, 27,  46 },
    { 84,   0, 39,  46 },
    { 84,   0, 46,  44 },
    { 84,   0, 34,  44 },
    { 84,   0, 27,  44 },
    { 84,   0, 39,  44 },
    { 84,   0, 46,  42 },
    { 84,   0, 34,  42 },
    { 84,   0, 27,  42 },
    { 84,   0, 39,  42 },
    { 84,   0, 46,  40 },
    { 84,   0, 34,  40 },
    { 84,   0, 27,  40 },
    { 84,   0, 39,  40 },
    { 84,   0, 46,  38 },
    { 84,   0, 34,  38 },
    { 84,   0, 27,  38 },
    { 84,   0, 39,  38 },
    { 84,   0, 46,  36 },
    { 84,   0, 34,  36 },
    { 84,   0, 27,  36 },
    { 84,   0, 39,  36 },
    { 84,   0, 46,  34 },
    { 84,   0, 34,  34 },
    { 84,   0, 27,  34 },
    { 84,   0, 39,  34 },
    { 84,   0, 46,  30 },
    { 84,   0, 34,  30 },
    { 84,   0, 27,  30 },
    { 84,   0, 39,  30 },
    { 84,   0, 46,  26 },
    { 84,   0, 34,  26 },
    { 84,   0, 27,  26 },
    { 84,   0, 39,  26 },
    { 84,   0, 46,  24 },
    { 84,   0, 34,  24 },
    { 84,   0, 27,  24 },
    { 84,   0, 39,  24 },
    { 84,   0, 46,  18 },
    { 84,   0, 34,  18 },
    { 84,   0, 27,  18 },
    { 84,   0, 39,  18 },
    { 84,   0, 46,  14 },
    { 84,   0, 34,  14 },
    { 84,   0, 27,  14 },
    { 84,   0, 39,  14 },
    { 84,   0, 46,  10 },
    { 84,   0, 34,  10 },
    { 84,   0, 27,  10 },
    { 84,   0, 39,  10 },
    { 84,   0, 46,   6 },
    { 84,   0, 34,   6 },
    { 84,   0, 27,   6 },
    { 84,   0, 39,   6 },
    { 84,   0, 46,   2 },
    { 84,   0, 34,   2 },
    { 84,   0, 27,   2 },
    { 84,   0, 39,   2 },
    { 84,   0, 27,   0 },
    { 84,   0, 39,   0 },
    { 84,   0, 26,   0 },
    { 84,   0, 46,   8 },
    { 84,   0, 34,   8 },
    { 84,   0, 27,   8 },
    { 84,   0, 39,   8 },
    { 84,   0, 46,   4 },
    { 84,   0, 34,   4 },
    { 84,   0, 27,   4 },
    { 84,   0, 39,   4 },
    { 84,   0, 46,  12 },
    { 84,   0, 34,  12 },
    { 84,   0, 27,  12 },
    { 84,   0, 39,  12 },
    { 84,   0, 46,  20 },
    { 84,   0, 34,  20 },
    { 84,   0, 27,  20 },
    { 84,   0, 39,  20 },
    { 84,   0, 46,  22 },
    { 84,   0, 34,  22 },
    { 84,   0, 27,  22 },
    { 84,   0, 39,  22 },
    { 84,   0, 46,  28 },
    { 84,   0, 34,  28 },
    { 84,   0, 27,  28 },
    { 84,   0, 39,  28 },
    { 84,   0, 46,  32 },
    { 84,   0, 34,  32 },
    { 84,   0, 27,  32 },
    { 84,   0, 39,  32 },
    { 84,   0, 46,  52 },
    { 84,   0, 34,  52 },
    { 84,   0, 27,  52 },
    { 84,   0, 39,  52 },
    { 84,   0, 46,  62 },
    { 84,   0, 34,  62 },
    { 84,   0, 27,  62 },
    { 84,   0, 39,  62 },
    { 84,   0, 46,  66 },
    { 84,   0, 34,  66 },
    { 84,   0, 27,  66 },
    { 84,   0, 39,  66 },
    { 84,   0, 46,  70 },
    { 84,   0, 34,  70 },
    { 84,   0, 27,  70 },
    { 84,   0, 39,  70 },
    { 84,   0, 46,  74 },
    { 84,   0, 34,  74 },
    { 84,   0, 27,  74 },
    { 84,   0, 39,  74 },
    { 84,   0, 46, 100 },
    { 84,   0, 34, 100 },
    { 84,   0, 27, 100 },
    { 84,   0, 39, 100 },
    { 84,   0, 46, 122 },
    { 84,   0, 34, 122 },
    { 84,   0, 27, 122 },
    { 84,   0, 39, 122 },
    { 84,   0, 46, 126 },
    { 84,   0, 34, 126 },
    { 84,   0, 27, 126 },
    { 84,   0, 39, 126 },
    { 84,   0, 32, 126 },
    { 84,   0, 32, 124 },
    { 84,   0, 32, 120 },
    { 84,   0, 32, 116 },
    { 84,   0, 32, 114 },
    { 84,   0, 46, 112 },
    { 84,   0, 34, 112 },
    { 84,   0, 32, 112 },
    { 84,   0, 27, 112 },
    { 84,   0, 39, 112 },
    { 84,   0, 32, 108 },
    { 84,   0, 32, 104 },
    { 84,   0, 32, 100 },
    { 84,   0, 32,  98 },
    { 84,   0, 32,  96 },
    { 84,   0, 32,  92 },
    { 84,   0, 32,  88 },
    { 84,   0, 32,  86 },
    { 84,   0, 32,  84 },
    { 84,   0, 32,  82 },
    { 84,   0, 46,  78 },
    { 84,   0, 34,  78 },
    { 84,   0, 32,  78 },
    { 84,   0, 27,  78 },
    { 84,   0, 39,  78 },
    { 84,   0, 32,  76 },
    { 84,   0, 32,  70 },
    { 84,   0, 32,  68 },
    { 84,   0, 32,  66 },
    { 84,   0, 32,  64 },
    { 84,   0, 32,  62 },
    { 84,   0, 32,  60 },
    { 84,   0, 32,  56 },
    { 84,   0, 46,  54 },
    { 84,   0, 34,  54 },
    { 84,   0, 32,  54 },
    { 84,   0, 27,  54 },
    { 84,   0, 39,  54 },
    { 84,   0, 32,  52 },
    { 84,   0, 32,  46 },
    { 84,   0, 32,  44 },
    { 84,   0, 32,  38 },
    { 84,   0, 32,  36 },
    { 84,   0, 32,  34 },
    { 84,   0, 32,  30 },
    { 84,   0, 32,  28 },
    { 84,   0, 32,  22 },
    { 84,   0, 32,  18 },
    { 84,   0, 32,  14 },
    { 84,   0, 32,  12 },
    { 84,   0, 32,   8 },
    { 84,   0, 32,   4 },
    { 84,   0, 32,   2 },
    { 84,   0, 32,   6 },
    { 84,   0, 32,  10 },
    { 84,   0, 32,  26 },
    { 84,   0, 32,  32 },
    { 84,   0, 32,  42 },
    { 84,   0, 32,  58 },
    { 84,   0, 32,  72 },
    { 84,   0, 32,  74 },
    { 84,   0, 32,  80 },
    { 84,   0, 32, 102 },
    { 84,   0, 32, 106 },
    { 84,   0, 32, 110 },
    { 84,   0, 32, 118 },
    { 84,   0, 32,  48 },
    { 84,   0, 32,  24 },
    { 84,   0, 46,  16 },
    { 84,   0, 34,  16 },
    { 84,   0, 32,  16 },
    { 84,   0, 32,  40 },
    { 84,   0, 32,  50 },
    { 84,   0, 32,  94 },
    { 84,   0, 32, 122 },
    { 84,   0, 32,  90 },
    { 84,   0, 32,  20 },
    { 84,   0, 33,   2 },
    { 84,   0, 33,   4 },
    { 84,   0, 33,   8 },
    { 84,   0, 33,  10 },
    { 84,   0, 33,  12 },
    { 84,   0, 29,  14 },
    { 84,   0, 41,  14 },
    { 84,   0, 47,  14 },
    { 84,   0, 35,  14 },
    { 84,   0, 33,  14 },
    { 84,   0, 33,  16 },
    { 84,   0, 33,  18 },
    { 84,   0, 33,  20 },
    { 84,   0, 33,  22 },
    { 84,   0, 33,  24 },
    { 84,   0, 33,  28 },
    { 84,   0, 33,  30 },
    { 84,   0, 33,  32 },
    { 84,   0, 33,  36 },
    { 84,   0, 33,  38 },
    { 84,   0, 33,  40 },
    { 84,   0, 33,  42 },
    { 84,   0, 33,  44 },
    { 84,   0, 33,  46 },
    { 84,   0, 33,  48 },
    { 84,   0, 33,  50 },
    { 84,   0, 33,  52 },
    { 84,   0, 33,  56 },
    { 84,   0, 33,  60 },
    { 84,   0, 33,  64 },
    { 84,   0, 33,  66 },
    { 84,   0, 33,  68 },
    { 84,   0, 29,  70 },
    { 84,   0, 41,  70 },
    { 84,   0, 47,  70 },
    { 84,   0, 35,  70 },
    { 84,   0, 33,  70 },
    { 84,   0, 33,  72 },
    { 84,   0, 33,  78 },
    { 84,   0, 33,  80 },
    { 84,   0, 33,  82 },
    { 84,   0, 33,  84 },
    { 84,   0, 33,  86 },
    { 84,   0, 33,  90 },
    { 84,   0, 33,  96 },
    { 84,   0, 33, 100 },
    { 84,   0, 33, 102 },
    { 84,   0, 33, 104 },
    { 84,   0, 33, 106 },
    { 84,   0, 29, 108 },
    { 84,   0, 41, 108 },
    { 84,   0, 47, 108 },
    { 84,   0, 35, 108 },
    { 84,   0, 33, 108 },
    { 84,   0, 29, 110 },
    { 84,   0, 41, 110 },
    { 84,   0, 47, 110 },
    { 84,   0, 35, 110 },
    { 84,   0, 33, 110 },
    { 84,   0, 29, 112 },
    { 84,   0, 41, 112 },
    { 84,   0, 47, 112 },
    { 84,   0, 35, 112 },
    { 84,   0, 33, 112 },
    { 84,   0, 33,  98 },
    { 84,   0, 33,  94 },
    { 84,   0, 33,  92 },
    { 84,   0, 33,  88 },
    { 84,   0, 33,  76 },
    { 84,   0, 33,  74 },
    { 84,   0, 33,  54 },
    { 84,   0, 33,  34 },
    { 84,   0, 33,  26 },
    { 84,   0, 33,   6 },
    { 60,   0, 69,   0 },
    { 84,   0, 45,   2 },
    { 84,   0, 31,   2 },
    { 84,   0, 43,   2 },
    { 84,   0, 60,   2 },
    { 84,   0, 45,   6 },
    { 84,   0, 31,   6 },
    { 84,   0, 43,   6 },
    { 84,   0, 60,   6 },
    { 84,   0, 59,  10 },
    { 84,   0, 45,  10 },
    { 84,   0, 31,  10 },
    { 84,   0, 43,  10 },
    { 84,   0, 60,  10 },
    { 84,   0, 45,  12 },
    { 84,   0, 31,  12 },
    { 84,   0, 43,  12 },
    { 84,   0, 60,  12 },
    { 84,   0, 59,  14 },
    { 84,   0, 45,  14 },
    { 84,   0, 31,  14 },
    { 84,   0, 43,  14 },
    { 84,   0, 60,  14 },
    { 84,   0, 59,  18 },
    { 84,   0, 45,  18 },
    { 84,   0, 31,  18 },
    { 84,   0, 43,  18 },
    { 84,   0, 60,  18 },
    { 84,   0, 45,  20 },
    { 84,   0, 31,  20 },
    { 84,   0, 43,  20 },
    { 84,   0, 60,  20 },
    { 84,   0, 45,  22 },
    { 84,   0, 31,  22 },
    { 84,   0, 43,  22 },
    { 84,   0, 60,  22 },
    { 84,   0, 45,  24 },
    { 84,   0, 31,  24 },
    { 84,   0, 43,  24 },
    { 84,   0, 60,  24 },
    { 84,   0, 45,  26 },
    { 84,   0, 31,  26 },
    { 84,   0, 43,  26 },
    { 84,   0, 60,  26 },
    { 84,   0, 45,  28 },
    { 84,   0, 31,  28 },
    { 84,   0, 43,  28 },
    { 84,   0, 60,  28 },
    { 84,   0, 59,  30 },
    { 84,   0, 45,  30 },
    { 84,   0, 31,  30 },
    { 84,   0, 43,  30 },
    { 84,   0, 60,  30 },
    { 84,   0, 59,  32 },
    { 84,   0, 45,  32 },
    { 84,   0, 31,  32 },
    { 84,   0, 43,  32 },
    { 84,   0, 60,  32 },
    { 84,   0, 59,  34 },
    { 84,   0, 45,  34 },
    { 84,   0, 31,  34 },
    { 84,   0, 43,  34 },
    { 84,   0, 60,  34 },
    { 84,   0, 59,  38 },
    { 84,   0, 45,  38 },
    { 84,   0, 31,  38 },
    { 84,   0, 43,  38 },
    { 84,   0, 60,  38 },
    { 84,   0, 59,  40 },
    { 84,   0, 45,  40 },
    { 84,   0, 31,  40 },
    { 84,   0, 43,  40 },
    { 84,   0, 60,  40 },
    { 84,   0, 59,  42 },
    { 84,   0, 45,  42 },
    { 84,   0, 31,  42 },
    { 84,   0, 43,  42 },
    { 84,   0, 60,  42 },
    { 84,   0, 59,  44 },
    { 84,   0, 45,  44 },
    { 84,   0, 31,  44 },
    { 84,   0, 43,  44 },
    { 84,   0, 60,  44 },
    { 84,   0, 59,  46 },
    { 84,   0, 45,  46 },
    { 84,   0, 31,  46 },
    { 84,   0, 43,  46 },
    { 84,   0, 60,  46 },
    { 84,   0, 59,  48 },
    { 84,   0, 45,  48 },
    { 84,   0, 31,  48 },
    { 84,   0, 43,  48 },
    { 84,   0, 60,  48 },
    { 84,   0, 59,  50 },
    { 84,   0, 45,  50 },
    { 84,   0, 31,  50 },
    { 84,   0, 43,  50 },
    { 84,   0, 60,  50 },
    { 84,   0, 59,  52 },
    { 84,   0, 45,  52 },
    { 84,   0, 31,  52 },
    { 84,   0, 43,  52 },
    { 84,   0, 60,  52 },
    { 84,   0, 59,  54 },
    { 84,   0, 45,  54 },
    { 84,   0, 31,  54 },
    { 84,   0, 43,  54 },
    { 84,   0, 60,  54 },
    { 84,   0, 59,  56 },
    { 84,   0, 45,  56 },
    { 84,   0, 31,  56 },
    { 84,   0, 43,  56 },
    { 84,   0, 60,  56 },
    { 84,   0, 59,  58 },
    { 84,   0, 33,  58 },
    { 84,   0, 45,  58 },
    { 84,   0, 31,  58 },
    { 84,   0, 43,  58 },
    { 84,   0, 60,  58 },
    { 84,   0, 59,  60 },
    { 84,   0, 45,  60 },
    { 84,   0, 31,  60 },
    { 84,   0, 43,  60 },
    { 84,   0, 60,  60 },
    { 84,   0, 59,  62 },
    { 84,   0, 33,  62 },
    { 84,   0, 45,  62 },
    { 84,   0, 31,  62 },
    { 84,   0, 43,  62 },
    { 84,   0, 60,  62 },
    { 84,   0, 59,  64 },
    { 84,   0, 45,  64 },
    { 84,   0, 31,  64 },
    { 84,   0, 43,  64 },
    { 84,   0, 60,  64 },
    { 84,   0, 59,  66 },
    { 84,   0, 45,  66 },
    { 84,   0, 31,  66 },
    { 84,   0, 43,  66 },
    { 84,   0, 60,  66 },
    { 84,   0, 59,  68 },
    { 84,   0, 45,  68 },
    { 84,   0, 31,  68 },
    { 84,   0, 43,  68 },
    { 84,   0, 60,  68 },
    { 84,   0, 59,  70 },
    { 84,   0, 45,  70 },
    { 84,   0, 31,  70 },
    { 84,   0, 43,  70 },
    { 84,   0, 60,  70 },
    { 84,   0, 59,  72 },
    { 84,   0, 45,  72 },
    { 84,   0, 31,  72 },
    { 84,   0, 43,  72 },
    { 84,   0, 60,  72 },
    { 84,   0, 59,  74 },
    { 84,   0, 45,  74 },
    { 84,   0, 31,  74 },
    { 84,   0, 43,  74 },
    { 84,   0, 60,  74 },
    { 84,   0, 59,  78 },
    { 84,   0, 45,  78 },
    { 84,   0, 31,  78 },
    { 84,   0, 43,  78 },
    { 84,   0, 60,  78 },
    { 84,   0, 59,  82 },
    { 84,   0, 45,  82 },
    { 84,   0, 31,  82 },
    { 84,   0, 43,  82 },
    { 84,   0, 60,  82 },
    { 84,   0, 59,  84 },
    { 84,   0, 45,  84 },
    { 84,   0, 31,  84 },
    { 84,   0, 43,  84 },
    { 84,   0, 60,  84 },
    { 84,   0, 59,  86 },
    { 84,   0, 45,  86 },
    { 84,   0, 31,  86 },
    { 84,   0, 43,  86 },
    { 84,   0, 60,  86 },
    { 84,   0, 59,  88 },
    { 84,   0, 45,  88 },
    { 84,   0, 31,  88 },
    { 84,   0, 43,  88 },
    { 84,   0, 60,  88 },
    { 84,   0, 59,  90 },
    { 84,   0, 45,  90 },
    { 84,   0, 31,  90 },
    { 84,   0, 43,  90 },
    { 84,   0, 60,  90 },
    { 84,   0, 59,  92 },
    { 84,   0, 45,  92 },
    { 84,   0, 31,  92 },
    { 84,   0, 43,  92 },
    { 84,   0, 60,  92 },
    { 84,   0, 59,  94 },
    { 84,   0, 45,  94 },
    { 84,   0, 31,  94 },
    { 84,   0, 43,  94 },
    { 84,   0, 60,  94 },
    { 84,   0, 59,  96 },
    { 84,   0, 45,  96 },
    { 84,   0, 31,  96 },
    { 84,   0, 43,  96 },
    { 84,   0, 60,  96 },
    { 84,   0, 59,  98 },
    { 84,   0, 45,  98 },
    { 84,   0, 31,  98 },
    { 84,   0, 43,  98 },
    { 84,   0, 60,  98 },
    { 84,   0, 59, 100 },
    { 84,   0, 45, 100 },
    { 84,   0, 31, 100 },
    { 84,   0, 43, 100 },
    { 84,   0, 60, 100 },
    { 84,   0, 59, 102 },
    { 84,   0, 45, 102 },
    { 84,   0, 31, 102 },
    { 84,   0, 43, 102 },
    { 84,   0, 60, 102 },
    { 84,   0, 59, 104 },
    { 84,   0, 45, 104 },
    { 84,   0, 31, 104 },
    { 84,   0, 43, 104 },
    { 84,   0, 60, 104 },
    { 84,   0, 59, 106 },
    { 84,   0, 45, 106 },
    { 84,   0, 31, 106 },
    { 84,   0, 43, 106 },
    { 84,   0, 60, 106 },
    { 84,   0, 59, 108 },
    { 84,   0, 45, 108 },
    { 84,   0, 31, 108 },
    { 84,   0, 43, 108 },
    { 84,   0, 60, 108 },
    { 84,   0, 59, 110 },
    { 84,   0, 45, 110 },
    { 84,   0, 31, 110 },
    { 84,   0, 43, 110 },
    { 84,   0, 60, 110 },
    { 84,   0, 59,  80 },
    { 84,   0, 45,  80 },
    { 84,   0, 31,  80 },
    { 84,   0, 43,  80 },
    { 84,   0, 60,  80 },
    { 84,   0, 59,  76 },
    { 84,   0, 45,  76 },
    { 84,   0, 31,  76 },
    { 84,   0, 43,  76 },
    { 84,   0, 60,  76 },
    { 84,   0, 59,  36 },
    { 84,   0, 45,  36 },
    { 84,   0, 31,  36 },
    { 84,   0, 43,  36 },
    { 84,   0, 60,  36 },
    { 84,   0, 45,   8 },
    { 84,   0, 31,   8 },
    { 84,   0, 43,   8 },
    { 84,   0, 60,   8 },
    { 84,   0, 59,   4 },
    { 84,   0, 45,   4 },
    { 84,   0, 31,   4 },
    { 84,   0, 43,   4 },
    { 84,   0, 60,   4 },
    { 84,   0, 54, 122 },
    { 84,   0, 51, 120 },
    { 84,   0, 54, 120 },
    { 84,   0, 51, 114 },
    { 84,   0, 54, 114 },
    { 84,   0, 54, 110 },
    { 84,   0, 54, 104 },
    { 84,   0, 54, 102 },
    { 84,   0, 54,  98 },
    { 84,   0, 54,  96 },
    { 84,   0, 51,  94 },
    { 84,   0, 54,  94 },
    { 84,   0, 54,  92 },
    { 84,   0, 54,  88 },
    { 84,   0, 54,  86 },
    { 84,   0, 51,  84 },
    { 84,   0, 54,  84 },
    { 84,   0, 54,  80 },
    { 84,   0, 54,  78 },
    { 84,   0, 54,  74 },
    { 84,   0, 54,  72 },
    { 84,   0, 54,  68 },
    { 84,   0, 54,  66 },
    { 84,   0, 54,  64 },
    { 84,   0, 54,  60 },
    { 84,   0, 54,  58 },
    { 84,   0, 51,  54 },
    { 84,   0, 54,  54 },
    { 84,   0, 54,  52 },
    { 84,   0, 54,  48 },
    { 84,   0, 54,  42 },
    { 84,   0, 54,  38 },
    { 84,   0, 54,  36 },
    { 84,   0, 54,  32 },
    { 84,   0, 54,  28 },
    { 84,   0, 54,  26 },
    { 84,   0, 54,  24 },
    { 84,   0, 54,  20 },
    { 84,   0, 51,  18 },
    { 84,   0, 54,  18 },
    { 84,   0, 54,  16 },
    { 84,   0, 54,  14 },
    { 84,   0, 54,  34 },
    { 84,   0, 54,  40 },
    { 84,   0, 54,  44 },
    { 84,   0, 54,  46 },
    { 84,   0, 54,  56 },
    { 84,   0, 54,  62 },
    { 84,   0, 54,  70 },
    { 84,   0, 54,  82 },
    { 84,   0, 54, 100 },
    { 84,   0, 54, 108 },
    { 84,   0, 54, 116 },
    { 84,   0, 54, 118 },
    { 84,   0, 54, 126 },
    { 84,   0, 64, 126 },
    { 84,   0, 64, 124 },
    { 84,   0, 51, 124 },
    { 84,   0, 64, 122 },
    { 84,   0, 64, 120 },
    { 84,   0, 64, 114 },
    { 84,   0, 64, 110 },
    { 84,   0, 64, 108 },
    { 84,   0, 64, 106 },
    { 84,   0, 64, 100 },
    { 84,   0, 64,  98 },
    { 84,   0, 64,  96 },
    { 84,   0, 64,  94 },
    { 84,   0, 64,  90 },
    { 84,   0, 51,  90 },
    { 84,   0, 64,  84 },
    { 84,   0, 64,  82 },
    { 84,   0, 64,  78 },
    { 84,   0, 64,  76 },
    { 84,   0, 64,  74 },
    { 84,   0, 64,  72 },
    { 84,   0, 64,  70 },
    { 84,   0, 64,  64 },
    { 84,   0, 64,  62 },
    { 84,   0, 64,  58 },
    { 84,   0, 64,  56 },
    { 84,   0, 64,  50 },
    { 84,   0, 51,  50 },
    { 84,   0, 64,  48 },
    { 84,   0, 64,  46 },
    { 84,   0, 64,  44 },
    { 84,   0, 64,  42 },
    { 84,   0, 64,  40 },
    { 84,   0, 64,  38 },
    { 84,   0, 64,  34 },
    { 84,   0, 64,  30 },
    { 84,   0, 64,  26 },
    { 84,   0, 64,  22 },
    { 84,   0, 64,  16 },
    { 84,   0, 64,  12 },
    { 84,   0, 64,  10 },
    { 84,   0, 64,   6 },
    { 84,   0, 64,   4 },
    { 84,   0, 51,   4 },
    { 84,   0, 62,  74 },
    { 84,   0, 67,  74 },
    { 84,   0, 62,  56 },
    { 84,   0, 67,  56 },
    { 84,   0, 62,  40 },
    { 84,   0, 67,  40 },
    { 84,   0, 62,  34 },
    { 84,   0, 67,  34 },
    { 84,   0, 55, 122 },
    { 84,   0, 55, 120 },
    { 84,   0, 55, 114 },
    { 84,   0, 55, 110 },
    { 84,   0, 55, 104 },
    { 84,   0, 55, 102 },
    { 84,   0, 55,  98 },
    { 84,   0, 55,  96 },
    { 84,   0, 55,  94 },
    { 84,   0, 55,  92 },
    { 84,   0, 55,  88 },
    { 84,   0, 55,  86 },
    { 84,   0, 55,  84 },
    { 84,   0, 55,  80 },
    { 84,   0, 55,  78 },
    { 84,   0, 55,  74 },
    { 84,   0, 55,  72 },
    { 84,   0, 55,  68 },
    { 84,   0, 55,  66 },
    { 84,   0, 55,  64 },
    { 84,   0, 55,  60 },
    { 84,   0, 55,  58 },
    { 84,   0, 55,  54 },
    { 84,   0, 55,  52 },
    { 84,   0, 55,  48 },
    { 84,   0, 55,  42 },
    { 84,   0, 55,  38 },
    { 84,   0, 55,  36 },
    { 84,   0, 55,  32 },
    { 84,   0, 55,  28 },
    { 84,   0, 55,  26 },
    { 84,   0, 55,  24 },
    { 84,   0, 65, 126 },
    { 84,   0, 65, 124 },
    { 84,   0, 65, 122 },
    { 84,   0, 65, 120 },
    { 84,   0, 65, 114 },
    { 84,   0, 52,  30 },
    { 84,   0, 52,  32 },
    { 84,   0, 52,  36 },
    { 84,   0, 52,  38 },
    { 84,   0, 52,  42 },
    { 84,   0, 52,  44 },
    { 84,   0, 52,  46 },
    { 84,   0, 52,  48 },
    { 84,   0, 52,  50 },
    { 84,   0, 52,  52 },
    { 84,   0, 52,  54 },
    { 84,   0, 52,  58 },
    { 84,   0, 52,  60 },
    { 84,   0, 52,  62 },
    { 84,   0, 52,  64 },
    { 84,   0, 52,  66 },
    { 84,   0, 52,  68 },
    { 84,   0, 52,  72 },
    { 84,   0, 52,  76 },
    { 84,   0, 52,  78 },
    { 84,   0, 52,  80 },
    { 84,   0, 52,  82 },
    { 84,   0, 52,  84 },
    { 84,   0, 52,  86 },
    { 84,   0, 52,  90 },
    { 84,   0, 52,  92 },
    { 84,   0, 52,  94 },
    { 84,   0, 52,  96 },
    { 84,   0, 52,  98 },
    { 84,   0, 52, 100 },
    { 84,   0, 52, 104 },
    { 84,   0, 52, 106 },
    { 84,   0, 52, 102 },
    { 84,   0, 52,  88 },
    { 84,   0, 52,  74 },
    { 84,   0, 52,  56 },
    { 84,   0, 52,  40 },
    { 84,   0, 52,  34 },
    { 84,   0, 52,  18 },
    { 84,   0, 52,  10 },
    { 84,   0, 52,   4 },
    { 84,   0, 58, 124 },
    { 84,   0, 58, 120 },
    { 84,   0, 58, 118 },
    { 84,   0, 58, 116 },
    { 84,   0, 58, 114 },
    { 84,   0, 58, 110 },
    { 84,   0, 58, 108 },
    { 84,   0, 58, 106 },
    { 84,   0, 58, 104 },
    { 84,   0, 58, 102 },
    { 84,   0, 58,  98 },
    { 84,   0, 58,  96 },
    { 84,   0, 58,  94 },
    { 84,   0, 58,  92 },
    { 84,   0, 58,  90 },
    { 84,   0, 58,  88 },
    { 84,   0, 58,  86 },
    { 84,   0, 58,  84 },
    { 84,   0, 58,  82 },
    { 84,   0, 58,  80 },
    { 84,   0, 58,  76 },
    { 84,   0, 58,  72 },
    { 84,   0, 58,  68 },
    { 84,   0, 58,  64 },
    { 84,   0, 58,  60 },
    { 84,   0, 58,  58 },
    { 84,   0, 58,  56 },
    { 84,   0, 58,  50 },
    { 84,   0, 58,  48 },
    { 84,   0, 58,  46 },
    { 84,   0, 58,  44 },
    { 84,   0, 58,  42 },
    { 84,   0, 58,  40 },
    { 84,   0, 58,  38 },
    { 84,   0, 58,  36 },
    { 84,   0, 58,  34 },
    { 84,   0, 65, 110 },
    { 84,   0, 65, 108 },
    { 84,   0, 65, 106 },
    { 84,   0, 65, 100 },
    { 84,   0, 65,  98 },
    { 84,   0, 65,  96 },
    { 84,   0, 65,  94 },
    { 84,   0, 65,  90 },
    { 84,   0, 65,  84 },
    { 84,   0, 65,  82 },
    { 84,   0, 65,  78 },
    { 84,   0, 65,  76 },
    { 84,   0, 65,  74 },
    { 84,   0, 65,  72 },
    { 84,   0, 65,  70 },
    { 84,   0, 65,  64 },
    { 84,   0, 65,  62 },
    { 84,   0, 65,  58 },
    { 84,   0, 65,  56 },
    { 84,   0, 65,  50 },
    { 84,   0, 65,  48 },
    { 84,   0, 55,  20 },
    { 84,   0, 55,  18 },
    { 84,   0, 55,  16 },
    { 84,   0, 55,  14 },
    { 84,   0, 55,  34 },
    { 84,   0, 55,  40 },
    { 84,   0, 55,  44 },
    { 84,   0, 55,  46 },
    { 84,   0, 55,  56 },
    { 84,   0, 55,  62 },
    { 84,   0, 55,  70 },
    { 84,   0, 55,  82 },
    { 84,   0, 55, 100 },
    { 84,   0, 55, 108 },
    { 84,   0, 55, 116 },
    { 84,   0, 55, 118 },
    { 84,   0, 55, 126 },
    { 84,   0, 65,  46 },
    { 84,   0, 65,  44 },
    { 84,   0, 65,  42 },
    { 84,   0, 65,  40 },
    { 84,   0, 65,  38 },
    { 84,   0, 65,  34 },
    { 84,   0, 65,  30 },
    { 84,   0, 65,  26 },
    { 84,   0, 65,  22 },
    { 84,   0, 65,  16 },
    { 84,   0, 65,  12 },
    { 84,   0, 65,  10 },
    { 84,   0, 65,   6 },
    { 84,   0, 65,   4 },
    { 84,   0, 65,   8 },
    { 84,   0, 65,  18 },
    { 84,   0, 65,  20 },
    { 84,   0, 65,  28 },
    { 84,   0, 65,  32 },
    { 84,   0, 65,  52 },
    { 84,   0, 65,  60 },
    { 84,   0, 65,  66 },
    { 84,   0, 65,  86 },
    { 84,   0, 65,  92 },
    { 84,   0, 65, 102 },
    { 84,   0, 65, 112 },
    { 84,   0, 65, 116 },
    { 84,   0, 65, 118 },
    { 84,   0, 65,  88 },
    { 84,   0, 65,  80 },
    { 84,   0, 65,  68 },
    { 84,   0, 65,  36 },
    { 84,   0, 62,  10 },
    { 84,   0, 62,  14 },
    { 84,   0, 62,  18 },
    { 84,   0, 62,  70 },
    { 84,   0, 62, 108 },
    { 84,   0, 62, 110 },
    { 84,   0, 62,   4 },
    { 84,   0, 58,  30 },
    { 84,   0, 58,  26 },
    { 84,   0, 58,  24 },
    { 84,   0, 58,  18 },
    { 84,   0, 58,  14 },
    { 84,   0, 58,  10 },
    { 84,   0, 58,   6 },
    { 84,   0, 58,   2 },
    { 84,   0, 58,   8 },
    { 84,   0, 58,   4 },
    { 84,   0, 58,  12 },
    { 84,   0, 58,  20 },
    { 84,   0, 58,  22 },
    { 84,   0, 58,  28 },
    { 84,   0, 58,  32 },
    { 84,   0, 58,  52 },
    { 84,   0, 58,  62 },
    { 84,   0, 58,  66 },
    { 84,   0, 58,  70 },
    { 84,   0, 58,  74 },
    { 84,   0, 58, 100 },
    { 84,   0, 58, 122 },
    { 84,   0, 58, 126 },
    { 84,   0, 30, 122 },
    { 84,   0, 42, 122 },
    { 84,   0, 30, 120 },
    { 84,   0, 42, 120 },
    { 84,   0, 30, 114 },
    { 84,   0, 42, 114 },
    { 84,   0, 30, 110 },
    { 84,   0, 42, 110 },
    { 84,   0, 65,  14 },
    { 84,   0, 65,   2 },
    { 84,   0, 65,  24 },
    { 84,   0, 64,   8 },
    { 84,   0, 67,  18 },
    { 84,   0, 67,  10 },
    { 84,   0, 67,   4 },
    { 84,   0, 66, 124 },
    { 84,   0, 66, 120 },
    { 84,   0, 66, 118 },
    { 84,   0, 66, 116 },
    { 84,   0, 66, 114 },
    { 84,   0, 66, 110 },
    { 84,   0, 66, 108 },
    { 84,   0, 66, 106 },
    { 84,   0, 66, 104 },
    { 84,   0, 66, 102 },
    { 84,   0, 66,  98 },
    { 84,   0, 66,  96 },
    { 84,   0, 66,  94 },
    { 84,   0, 66,  92 },
    { 84,   0, 66,  90 },
    { 84,   0, 66,  88 },
    { 84,   0, 66,  86 },
    { 84,   0, 66,  84 },
    { 84,   0, 66,  82 },
    { 84,   0, 66,  80 },
    { 84,   0, 66,  76 },
    { 84,   0, 66,  72 },
    { 84,   0, 66,  68 },
    { 84,   0, 66,  64 },
    { 84,   0, 66,  60 },
    { 84,   0, 66,  58 },
    { 84,   0, 66,  56 },
    { 84,   0, 66,  50 },
    { 84,   0, 66,  48 },
    { 84,   0, 66,  46 },
    { 84,   0, 66,  44 },
    { 84,   0, 66,  42 },
    { 84,   0, 66,  40 },
    { 84,   0, 66,  38 },
    { 84,   0, 66,  36 },
    { 84,   0, 66,  34 },
    { 84,   0, 66,  30 },
    { 84,   0, 66,  26 },
    { 84,   0, 66,  24 },
    { 84,   0, 66,  18 },
    { 84,   0, 66,  14 },
    { 84,   0, 66,  10 },
    { 84,   0, 66,   6 },
    { 84,   0, 66,   2 },
    { 84,   0, 66,   8 },
    { 84,   0, 66,   4 },
    { 84,   0, 66,  12 },
    { 84,   0, 66,  20 },
    { 84,   0, 66,  22 },
    { 84,   0, 66,  28 },
    { 84,   0, 66,  32 },
    { 84,   0, 66,  52 },
    { 84,   0, 66,  62 },
    { 84,   0, 66,  66 },
    { 84,   0, 66,  70 },
    { 84,   0, 66,  74 },
    { 84,   0, 66, 100 },
    { 84,   0, 66, 122 },
    { 84,   0, 66, 126 },
    { 84,   0, 64,  18 },
    { 84,   0, 64,  20 },
    { 84,   0, 64,  28 },
    { 84,   0, 64,  32 },
    { 84,   0, 64,  52 },
    { 84,   0, 64,  60 },
    { 84,   0, 64,  66 },
    { 84,   0, 64,  86 },
    { 84,   0, 64,  92 },
    { 84,   0, 64, 102 },
    { 84,   0, 64, 112 },
    { 84,   0, 64, 116 },
    { 84,   0, 64, 118 },
    { 84,   0, 64,  88 },
    { 84,   0, 64,  80 },
    { 84,   0, 64,  68 },
    { 84,   0, 64,  36 },
    { 84,   0, 61, 124 },
    { 84,   0, 61, 120 },
    { 84,   0, 61, 118 },
    { 84,   0, 61, 116 },
    { 84,   0, 61, 114 },
    { 84,   0, 61, 110 },
    { 84,   0, 61, 108 },
    { 84,   0, 61, 106 },
    { 84,   0, 61, 104 },
    { 84,   0, 61, 102 },
    { 84,   0, 61,  98 },
    { 84,   0, 61,  96 },
    { 84,   0, 61,  94 },
    { 84,   0, 61,  92 },
    { 84,   0, 61,  90 },
    { 84,   0, 61,  88 },
    { 84,   0, 61,  86 },
    { 84,   0, 61,  84 },
    { 84,   0, 61,  82 },
    { 84,   0, 61,  80 },
    { 84,   0, 61,  76 },
    { 84,   0, 61,  72 },
    { 84,   0, 61,  68 },
    { 84,   0, 61,  64 },
    { 84,   0, 61,  60 },
    { 84,   0, 61,  58 },
    { 84,   0, 61,  56 },
    { 84,   0, 61,  50 },
    { 84,   0, 61,  48 },
    { 84,   0, 61,  46 },
    { 84,   0, 61,  44 },
    { 84,   0, 61,  42 },
    { 84,   0, 61,  40 },
    { 84,   0, 61,  38 },
    { 84,   0, 61,  36 },
    { 84,   0, 61,  34 },
    { 84,   0, 61,  30 },
    { 84,   0, 61,  26 },
    { 84,   0, 61,  24 },
    { 84,   0, 61,  18 },
    { 84,   0, 61,  14 },
    { 84,   0, 61,  10 },
    { 84,   0, 61,   6 },
    { 84,   0, 61,   2 },
    { 84,   0, 61,   8 },
    { 84,   0, 61,   4 },
    { 84,   0, 64,   2 },
    { 84,   0, 64,  14 },
    { 84,   0, 64,  24 },
    { 84,   0, 64,  54 },
    { 84,   0, 64, 104 },
    { 84,   0, 61,  12 },
    { 84,   0, 61,  20 },
    { 84,   0, 61,  22 },
    { 84,   0, 45,  16 },
    { 84,   0, 62, 126 },
    { 84,   0, 62, 124 },
    { 84,   0, 62, 122 },
    { 84,   0, 62, 120 },
    { 84,   0, 62, 114 },
    { 84,   0, 66,  16 },
    { 72,   0, 83,   0 },
    { 72,   0, 82,   0 },
    { 72,   0, 81,   0 },
    { 72,   0, 74,   0 },
    { 72,   0, 71,   0 },
    { 72,   0, 87,   0 },
    { 72,   0, 65,   0 },
    { 60,   0, 66,   0 },
    { 72,   0, 42,   0 },
    { 72,   0, 54,   0 },
    { 72,   0, 30,   0 },
    { 72,   0, 77,   0 },
    { 72,   0, 76,   0 },
    { 72,   0, 70,   0 },
    { 72,   0, 69,   0 },
    { 72,   0, 66,   0 },
    { 72,   0, 64,   0 },
    { 60,   0, 88,   0 },
    { 60,   0, 78,   0 },
    { 60,   0, 42,   0 },
    { 60,   0, 87,   0 },
    { 60,   0, 86,   0 },
    { 60,   0, 83,   0 },
    { 60,   0, 70,   0 },
    { 72,   0, 23,   0 },
    { 60,   0, 81,   0 },
    { 72,   0, 78,   0 },
    { 72,   0, 58,   0 },
    { 72,   0, 37,   0 },
    { 72,   0, 86,   0 },
    { 72,   0, 33,   0 },
    { 72,   0, 92,   0 },
    { 72,   0, 90,   0 },
    { 72,   0, 89,   0 },
    { 72,   0, 91,   0 },
    { 72,   0, 49,   0 },
    { 72,   0, 61,   0 },
    { 72,   0, 46,   0 },
    { 60,   1, 35,   0 },
    { 60,   1, 36,   0 },
    { 60,   1, 72,   0 },
    { 60,   1, 48,   0 },
    { 60,   1, 84,   0 },
    { 60,   1, 60,   0 },
    { 60,   1, 38,   0 },
    { 60,   1, 40,   0 },
    { 60,   1, 33,   0 },
    { 60,   1, 28,   0 },
    { 60,   1, 67,   0 },
    { 60,   1, 29,   0 },
    { 60,   1, 55,   0 },
    { 60,   1, 62,   0 },
    { 60,   1, 64,   0 },
    { 60,   1, 65,   0 },
    { 60,   1, 52,   0 },
    { 60,   1, 50,   0 },
    { 60,   1, 53,   0 },
    { 60,   1, 41,   0 },
    { 60,   1, 79,   0 },
    { 72,   0, 94,   0 },
    { 72,   0, 93,   0 },
    { 60,   1, 56,   0 },
    { 60,   1, 59,   0 },
    { 72,   0, 88,   0 },
    { 72,   0, 35, 104 },
    { 72,   0, 28, 104 },
    { 72,   0, 35,  56 },
    { 72,   0, 28,  56 },
    { 72,   0, 35,   8 },
    { 72,   0, 28,   8 },
    { 72,   0, 34, 112 },
    { 72,   0, 27, 112 },
    { 72,   0, 34,  88 },
    { 72,   0, 27,  88 },
    { 72,   0, 34,  64 },
    { 72,   0, 27,  64 },
    { 72,   0, 34,  40 },
    { 72,   0, 27,  40 },
    { 72,   0, 34,  16 },
    { 72,   0, 27,  16 },
    { 72,   0, 33, 120 },
    { 72,   0, 26, 120 },
    { 72,   0, 33,  96 },
    { 72,   0, 26,  96 },
    { 72,   0, 33,  72 },
    { 72,   0, 26,  72 },
    { 72,   0, 33,  24 },
    { 72,   0, 26,  24 },
    { 72,   0, 25,   0 },
    { 72,   0, 32, 104 },
    { 72,   0, 25, 104 },
    { 72,   0, 32,  80 },
    { 72,   0, 25,  80 },
    { 72,   0, 32,  32 },
    { 72,   0, 25,  32 },
    { 72,   0, 32,   8 },
    { 72,   0, 25,   8 },
    { 72,   0, 31,  88 },
    { 72,   0, 24,  88 },
    { 72,   0, 31,  64 },
    { 72,   0, 24,  64 },
    { 72,   0, 31,  16 },
    { 72,   0, 24,  16 },
    { 72,   0, 30,  96 },
    { 72,   0, 23,  96 },
    { 72,   0, 30,  72 },
    { 72,   0, 23,  72 },
    { 72,   0, 30,  24 },
    { 72,   0, 23,  24 },
    { 72,   0, 22,   0 },
    { 72,   0, 29, 104 },
    { 72,   0, 22, 104 },
    { 72,   0, 29,  56 },
    { 72,   0, 22,  56 },
    { 72,   0, 29,  32 },
    { 72,   0, 22,  32 },
    { 72,   0, 29,   8 },
    { 72,   0, 22,   8 },
    { 72,   0, 28, 112 },
    { 72,   0, 21, 112 },
    { 72,   0, 28,  88 },
    { 72,   0, 21,  88 },
    { 72,   0, 28,  16 },
    { 72,   0, 21,  16 },
    { 72,   0, 27, 120 },
    { 72,   0, 20, 120 },
    { 72,   0, 27,  96 },
    { 72,   0, 20,  96 },
    { 72,   0, 27,  72 },
    { 72,   0, 20,  72 },
    { 72,   0, 27,  48 },
    { 72,   0, 20,  48 },
    { 72,   0, 26,   0 },
    { 72,   0, 19,   0 },
    { 72,   0, 24,   0 },
    { 72,   0, 24,  96 },
    { 72,   0, 24,  72 },
    { 72,   0, 24,  48 },
    { 72,   0, 25,  16 },
    { 72,   0, 21,  64 },
    { 72,   0, 28,  64 },
    { 72,   0, 25,  64 },
    { 72,   0, 25,  88 },
    { 72,   0, 26,   8 },
    { 72,   0, 26,  32 },
    { 72,   0, 22,  80 },
    { 72,   0, 29,  80 },
    { 72,   0, 26,  80 },
    { 72,   0, 26, 104 },
    { 72,   0, 27,  24 },
    { 72,   0, 23,  48 },
    { 72,   0, 30,  48 },
    { 72,   0, 23, 120 },
    { 72,   0, 30, 120 },
    { 72,   0, 21,  40 },
    { 72,   0, 28,  40 },
    { 72,   0, 33,  40 },
    { 72,   0, 32,  40 },
    { 72,   0, 35,  40 },
    { 72,   0, 32,  64 },
    { 72,   0, 35,  64 },
    { 72,   0, 33,  64 },
    { 72,   0, 32, 112 },
    { 72,   0, 35, 112 },
    { 72,   0, 33, 112 },
    { 72,   0, 33,  32 },
    { 72,   0, 36,  32 },
    { 72,   0, 34,  32 },
    { 72,   0, 33,  56 },
    { 72,   0, 36,  56 },
    { 72,   0, 34,  56 },
    { 72,   0, 33,  80 },
    { 72,   0, 36,  80 },
    { 72,   0, 34,  80 },
    { 72,   0, 34,  48 },
    { 72,   0, 37,  48 },
    { 72,   0, 35,  48 },
    { 72,   0, 34,  72 },
    { 72,   0, 37,  72 },
    { 72,   0, 35,  72 },
    { 72,   0, 34,  96 },
    { 72,   0, 37,  96 },
    { 72,   0, 35,  96 },
    { 72,   0, 34, 120 },
    { 72,   0, 37, 120 },
    { 72,   0, 35, 120 },
    { 72,   0, 35,  16 },
    { 72,   0, 38,  16 },
    { 72,   0, 36,  16 },
    { 72,   0, 24,  40 },
    { 72,   0, 31,  40 },
    { 72,   0, 38,  40 },
    { 72,   0, 36,  40 },
    { 72,   0, 38,  64 },
    { 72,   0, 36,  64 },
    { 72,   0, 24, 112 },
    { 72,   0, 31, 112 },
    { 72,   0, 38, 112 },
    { 72,   0, 36, 112 },
    { 72,   0, 38,  88 },
    { 72,   0, 35,  88 },
    { 72,   0, 36,  88 },
    { 72,   0, 39,   8 },
    { 72,   0, 36,   8 },
    { 72,   0, 37,   8 },
    { 72,   0, 39,  32 },
    { 72,   0, 37,  32 },
    { 72,   0, 32,  56 },
    { 72,   0, 25,  56 },
    { 72,   0, 39,  56 },
    { 72,   0, 37,  56 },
    { 72,   0, 39,  80 },
    { 72,   0, 37,  80 },
    { 72,   0, 40,  24 },
    { 72,   0, 37,  24 },
    { 72,   0, 38,  24 },
    { 72,   0, 39, 104 },
    { 72,   0, 36, 104 },
    { 72,   0, 37, 104 },
    { 72,   0, 40,  72 },
    { 72,   0, 38,  72 },
    { 72,   0, 40,  96 },
    { 72,   0, 38,  96 },
    { 72,   0, 40, 120 },
    { 72,   0, 38, 120 },
    { 72,   0, 41,  16 },
    { 72,   0, 39,  16 },
    { 72,   0, 41,  40 },
    { 72,   0, 39,  40 },
    { 72,   0, 41,  88 },
    { 72,   0, 39,  88 },
    { 72,   0, 41, 112 },
    { 72,   0, 39, 112 },
    { 72,   0, 29, 112 },
    { 72,   0, 35,  32 },
    { 72,   0, 28,  32 },
    { 72,   0, 30,  32 },
    { 72,   0, 42,  32 },
    { 72,   0, 40,  32 },
    { 72,   0, 27,   0 },
    { 72,   0, 12,   0 },
    { 72,   0, 95,   0 },
    { 72,   0, 96,   0 },
    { 72,   0, 98,   0 },
    { 72,   0, 101,   0 },
    { 72,   0, 27, 104 },
    { 72,   0, 27,  56 },
    { 72,   0, 27,   8 },
    { 72,   0, 26, 112 },
    { 72,   0, 26,  88 },
    { 72,   0, 26,  64 },
    { 72,   0, 26,  40 },
    { 72,   0, 26,  16 },
    { 72,   0, 25, 120 },
    { 72,   0, 25,  96 },
    { 72,   0, 25,  72 },
    { 72,   0, 25,  24 },
    { 72,   0, 24, 104 },
    { 72,   0, 24,  80 },
    { 72,   0, 24,  32 },
    { 72,   0, 24,   8 },
    { 72,   0, 23,  88 },
    { 72,   0, 23,  64 },
    { 72,   0, 23,  16 },
    { 72,   0, 22,  96 },
    { 72,   0, 22,  72 },
    { 72,   0, 22,  24 },
    { 72,   0, 21,   0 },
    { 72,   0, 21, 104 },
    { 72,   0, 21,  56 },
    { 72,   0, 21,  32 },
    { 72,   0, 21,   8 },
    { 72,   0, 20, 112 },
    { 72,   0, 20,  88 },
    { 72,   0, 20,  16 },
    { 72,   0, 19, 120 },
    { 72,   0, 19,  96 },
    { 72,   0, 19,  72 },
    { 72,   0, 19,  48 },
    { 72,   0, 18,   0 },
    { 72,   0, 26,  48 },
    { 72,   0, 25, 112 },
    { 72,   0, 26,  56 },
    { 72,   0,  4,   0 },
    { 72,   0, 11,   0 },
    { 72,   0,  5,   0 },
    { 72,   0, 10,   0 },
    { 72,   0,  3,   0 },
    { 72,   0, 17,   0 },
    { 72,   0, 15,  32 },
    { 72,   0, 18,  80 },
    { 72,   0, 16,  80 },
    { 72,   0, 15,  80 },
    { 72,   0, 27,  80 },
    { 72,   0, 17,  48 },
    { 72,   0, 16,  48 },
    { 72,   0, 28,  48 },
    { 72,   0, 17,  96 },
    { 72,   0, 16,  96 },
    { 72,   0, 28,  96 },
    { 72,   0, 18,  16 },
    { 72,   0, 17,  16 },
    { 72,   0, 29,  16 },
    { 72,   0, 18, 112 },
    { 72,   0, 17, 112 },
    { 72,   0, 31,  96 },
    { 72,   0, 32,  16 },
    { 72,   0, 23, 112 },
    { 72,   0, 27,  32 },
    { 72,   0, 25,  48 },
    { 72,   0, 29,  64 },
    { 72,   0, 30,  80 },
    { 72,   0, 28,  80 },
    { 72,   0, 22,  48 },
    { 72,   0, 21,  80 },
    { 72,   0, 31,  48 },
    { 72,   0, 20,  64 },
    { 72,   0, 18,  64 },
    { 72,   0, 17,  64 },
    { 72,   0, 19,  80 },
    { 72,   0, 73,   0 },
    { 72,   0, 40,  48 },
    { 72,   0, 41,  64 },
    { 72,   0, 42,  80 },
    { 72,   0, 43,  48 },
    { 72,   0, 43,  96 },
    { 72,   0, 44,  16 },
    { 72,   0, 44,  64 },
    { 72,   0, 44, 112 },
    { 72,   0, 45,  80 },
    { 72,   0, 46,  96 },
    { 72,   0, 47,  16 },
    { 72,   0, 47,  64 },
    { 72,   0, 47, 112 },
    { 72,   0, 48,  80 },
    { 72,   0, 49,  48 },
    { 72,   0, 49,  96 },
    { 72,   0, 50,  16 },
    { 72,   0, 50,  64 },
    { 72,   0, 50, 112 },
    { 72,   0, 51,  32 },
    { 72,   0, 51,  80 },
    { 72,   0, 48,  32 },
    { 72,   0, 46,  48 },
    { 72,   0, 45,  32 },
    { 72,   0, 52,  48 },
    { 72,   0, 53,  16 },
    { 72,   0, 53,  64 },
    { 72,   0, 53, 112 },
    { 72,   0, 54,  32 },
    { 72,   0, 54,  80 },
    { 72,   0, 55,  96 },
    { 72,   0, 56,  16 },
    { 72,   0, 56,  64 },
    { 72,   0, 56, 112 },
    { 72,   0, 57,  80 },
    { 72,   0, 55,  48 },
    { 72,   0, 52,  96 },
    { 72,   0, 58,  48 },
    { 72,   0, 58,  96 },
    { 72,   0, 59,  16 },
    { 72,   0, 59, 112 },
    { 72,   0, 60,  32 },
    { 72,   0, 61,  96 },
    { 72,   0, 62,  16 },
    { 72,   0, 62, 112 },
    { 72,   0, 63,  32 },
    { 72,   0, 63,  80 },
    { 72,   0, 62,  64 },
    { 72,   0, 61,  48 },
    { 72,   0, 59,  64 },
    { 72,   0, 57,  32 },
    { 72,   0, 63,  48 },
    { 72,   0, 60,  48 },
    { 72,   0, 67,  48 },
    { 72,   0, 75,  48 },
    { 72,   0, 79,  48 },
    { 72,   0, 72,  48 },
    { 72,   0, 74,  48 },
    { 72,   0, 63,  96 },
    { 72,   0, 60,  96 },
    { 72,   0, 67,  96 },
    { 72,   0, 75,  96 },
    { 72,   0, 79,  96 },
    { 72,   0, 72,  96 },
    { 72,   0, 74,  96 },
    { 72,   0, 64,  16 },
    { 72,   0, 61,  16 },
    { 72,   0, 68,  16 },
    { 72,   0, 76,  16 },
    { 72,   0, 80,  16 },
    { 72,   0, 73,  16 },
    { 72,   0, 75,  16 },
    { 72,   0, 64,  64 },
    { 72,   0, 61,  64 },
    { 72,   0, 68,  64 },
    { 72,   0, 76,  64 },
    { 72,   0, 80,  64 },
    { 72,   0, 73,  64 },
    { 72,   0, 75,  64 },
    { 72,   0, 64, 112 },
    { 72,   0, 61, 112 },
    { 72,   0, 68, 112 },
    { 72,   0, 76, 112 },
    { 72,   0, 80, 112 },
    { 72,   0, 73, 112 },
    { 72,   0, 75, 112 },
    { 72,   0, 65,  80 },
    { 72,   0, 62,  80 },
    { 72,   0, 69,  80 },
    { 72,   0, 77,  80 },
    { 72,   0, 81,  80 },
    { 72,   0, 74,  80 },
    { 72,   0, 76,  80 },
    { 72,   0, 66,  48 },
    { 72,   0, 70,  48 },
    { 72,   0, 78,  48 },
    { 72,   0, 82,  48 },
    { 72,   0, 77,  48 },
    { 72,   0, 66,  96 },
    { 72,   0, 70,  96 },
    { 72,   0, 78,  96 },
    { 72,   0, 82,  96 },
    { 72,   0, 77,  96 },
    { 72,   0, 67,  16 },
    { 72,   0, 71,  16 },
    { 72,   0, 79,  16 },
    { 72,   0, 83,  16 },
    { 72,   0, 78,  16 },
    { 72,   0, 67,  64 },
    { 72,   0, 71,  64 },
    { 72,   0, 79,  64 },
    { 72,   0, 83,  64 },
    { 72,   0, 78,  64 },
    { 72,   0, 67, 112 },
    { 72,   0, 71, 112 },
    { 72,   0, 79, 112 },
    { 72,   0, 83, 112 },
    { 72,   0, 78, 112 },
    { 72,   0, 14, 112 },
    { 72,   0, 15, 112 },
    { 72,   0, 13,  48 },
    { 72,   0, 14,  48 },
    { 72,   0, 12,  32 },
    { 72,   0, 13,  32 },
    { 72,   0, 11, 112 },
    { 72,   0, 12, 112 },
    { 72,   0, 11,  16 },
    { 72,   0, 14,  16 },
    { 72,   0, 12,  16 },
    { 72,   0, 10,  96 },
    { 72,   0, 13,  96 },
    { 72,   0, 11,  96 },
    { 72,   0, 10,  48 },
    { 72,   0, 11,  48 },
    { 72,   0,  9,   0 },
    { 72,   0,  9,  80 },
    { 72,   0, 12,  80 },
    { 72,   0, 10,  80 },
    { 72,   0,  9,  32 },
    { 72,   0, 10,  32 },
    { 72,   0,  8,  64 },
    { 72,   0, 11,  64 },
    { 72,   0,  9,  64 },
    { 72,   0,  8,  16 },
    { 72,   0,  9,  16 },
    { 72,   0,  7,  96 },
    { 72,   0,  8,  96 },
    { 72,   0,  7,  48 },
    { 72,   0,  8,  48 },
    { 72,   0,  6,  80 },
    { 72,   0,  7,  80 },
    { 72,   0,  6,  32 },
    { 72,   0,  7,  32 },
    { 72,   0,  5,  64 },
    { 72,   0,  6,  64 },
    { 72,   0,  5,  16 },
    { 72,   0,  6,  16 },
    { 72,   0,  5, 112 },
    { 72,   0,  8, 112 },
    { 72,   0,  6, 112 },
    { 72,   0,  9, 112 },
    { 72,   0, 14,  64 },
    { 72,   0, 12,  64 },
    { 72,   0, 13,  80 },
    { 72,   0, 14,  96 },
    { 72,   0, 18,  32 },
    { 72,   0, 16,  32 },
    { 72,   0, 19,  32 },
    { 72,   0, 65,  32 },
    { 72,   0, 62,  32 },
    { 72,   0, 69,  32 },
    { 72,   0, 77,  32 },
    { 72,   0, 81,  32 },
    { 72,   0, 74,  32 },
    { 72,   0, 76,  32 },
    { 72,   0, 68,  32 },
    { 72,   0, 72,  32 },
    { 72,   0, 80,  32 },
    { 72,   0, 84,  32 },
    { 72,   0, 79,  32 },
    { 72,   0, 68,  80 },
    { 72,   0, 72,  80 },
    { 72,   0, 80,  80 },
    { 72,   0, 84,  80 },
    { 72,   0, 79,  80 },
    { 72,   0, 85,   0 },
    { 72,   0, 69,  48 },
    { 72,   0, 73,  48 },
    { 72,   0, 81,  48 },
    { 72,   0, 85,  48 },
    { 72,   0, 80,  48 },
    { 72,   0, 69,  96 },
    { 72,   0, 73,  96 },
    { 72,   0, 81,  96 },
    { 72,   0, 85,  96 },
    { 72,   0, 80,  96 },
    { 72,   0, 70,  16 },
    { 72,   0, 74,  16 },
    { 72,   0, 82,  16 },
    { 72,   0, 86,  16 },
    { 72,   0, 81,  16 },
    { 72,   0, 32,  96 },
    { 72,   0, 31,  80 },
    { 72,   0, 30, 112 },
    { 72,   0, 30,  16 },
    { 72,   0, 29,  96 },
    { 72,   0, 29,  48 },
    { 72,   0, 30,  64 },
    { 72,   0, 32,  48 },
    { 72,   0, 33,  16 },
    { 72,   0, 38,  48 },
    { 72,   0, 39,  64 },
    { 72,   0, 40,  80 },
    { 72,   0, 41,  48 },
    { 72,   0, 41,  96 },
    { 72,   0, 42,  64 },
    { 72,   0, 42, 112 },
    { 72,   0, 56,  80 },
    { 72,   0, 52,  80 },
    { 72,   0, 35,  80 },
    { 72,   0, 56,  32 },
    { 72,   0, 52,  32 },
    { 72,   0, 55,  64 },
    { 72,   0, 51,  64 },
    { 72,   0, 54,  96 },
    { 72,   0, 50,  96 },
    { 72,   0, 54,  48 },
    { 72,   0, 50,  48 },
    { 72,   0, 33,  48 },
    { 72,   0, 53,  80 },
    { 72,   0, 49,  80 },
    { 72,   0, 52, 112 },
    { 72,   0, 48, 112 },
    { 72,   0, 52,  64 },
    { 72,   0, 48,  64 },
    { 72,   0, 52,  16 },
    { 72,   0, 48,  16 },
    { 72,   0, 51,  96 },
    { 72,   0, 47,  96 },
    { 72,   0, 51,  48 },
    { 72,   0, 47,  48 },
    { 72,   0, 50,  80 },
    { 72,   0, 46,  80 },
    { 72,   0, 49, 112 },
    { 72,   0, 45, 112 },
    { 72,   0, 49,  64 },
    { 72,   0, 45,  64 },
    { 72,   0, 48,  96 },
    { 72,   0, 44,  96 },
    { 72,   0, 46, 112 },
    { 72,   0, 46,  64 },
    { 72,   0, 45,  48 },
    { 72,   0, 44,  80 },
    { 72,   0, 23,  80 },
    { 72,   0, 43, 112 },
    { 72,   0, 22, 112 },
    { 72,   0, 15,  64 },
    { 72,   0, 43,  64 },
    { 72,   0, 22,  64 },
    { 72,   0, 15,  16 },
    { 72,   0, 43,  16 },
    { 72,   0, 22,  16 },
    { 72,   0, 42,  96 },
    { 72,   0, 21,  96 },
    { 72,   0, 15,   0 },
    { 72,   0, 13,   0 },
    { 72,   0, 20,   0 },
    { 72,   0, 44,  32 },
    { 72,   0, 23,  32 },
    { 72,   0, 46,  16 },
    { 72,   0, 42,  16 },
    { 72,   0, 60,  80 },
    { 72,   0, 47,  32 },
    { 72,   0, 43,  32 },
    { 72,   0, 31,  32 },
    { 72,   0, 48,  48 },
    { 72,   0, 44,  48 },
    { 72,   0, 53,  32 },
    { 72,   0, 49,  32 },
    { 72,   0, 55,  16 },
    { 72,   0, 51,  16 },
    { 72,   0, 50,  32 },
    { 72,   0, 46,  32 },
    { 72,   0, 49,  16 },
    { 72,   0, 45,  16 },
    { 72,   0, 47,  80 },
    { 72,   0, 43,  80 },
    { 72,   0, 16,   0 },
    { 72,   0, 41,  32 },
    { 72,   0, 20,  32 },
    { 72,   0, 40,  64 },
    { 72,   0, 19,  64 },
    { 72,   0, 39,  96 },
    { 72,   0, 18,  96 },
    { 72,   0, 39,  48 },
    { 72,   0, 18,  48 },
    { 72,   0, 38,  32 },
    { 72,   0, 17,  32 },
    { 72,   0, 37, 112 },
    { 72,   0, 16, 112 },
    { 72,   0, 37,  16 },
    { 72,   0, 16,  16 },
    { 72,   0, 36,  96 },
    { 72,   0, 15,  96 },
    { 72,   0, 36,  48 },
    { 72,   0, 15,  48 },
    { 72,   0,  7,   0 },
    { 72,   0,  6,   0 },
    { 72,   0, 14,   0 },
    { 72,   0, 14,  80 },
    { 72,   0, 14,  32 },
    { 72,   0, 13,  64 },
    { 72,   0, 13,  16 },
    { 72,   0, 13, 112 },
    { 72,   0, 37,  64 },
    { 72,   0, 16,  64 },
    { 72,   0, 40,  16 },
    { 72,   0, 19,  16 },
    { 72,   0, 41,  80 },
    { 72,   0, 20,  80 },
    { 72,   0, 42,  48 },
    { 72,   0, 21,  48 },
    { 72,   0, 55, 112 },
    { 72,   0, 51, 112 },
    { 72,   0, 64,  80 },
    { 72,   0, 78,  80 },
    { 72,   0, 75,  80 },
    { 72,   0, 71,  80 },
    { 72,   0, 63, 112 },
    { 72,   0, 77, 112 },
    { 72,   0, 74, 112 },
    { 72,   0, 70, 112 },
    { 72,   0, 63,  16 },
    { 72,   0, 77,  16 },
    { 72,   0, 60, 112 },
    { 72,   0, 65, 112 },
    { 72,   0, 72, 112 },
    { 72,   0, 60,  16 },
    { 72,   0, 65,  16 },
    { 72,   0, 72,  16 },
    { 72,   0, 57, 112 },
    { 72,   0, 69, 112 },
    { 72,   0, 56,  96 },
    { 72,   0, 64,  96 },
    { 72,   0, 68,  96 },
    { 72,   0, 54, 112 },
    { 72,   0, 66, 112 },
    { 72,   0, 54,  16 },
    { 72,   0, 66,  16 },
    { 72,   0, 53,  96 },
    { 72,   0, 65,  96 },
    { 72,   0, 66,  80 },
    { 72,   0, 59,  80 },
    { 72,   0, 58, 112 },
    { 72,   0, 64,  48 },
    { 72,   0, 66,  32 },
    { 72,   0, 74,  64 },
    { 72,   0, 75,  32 },
    { 72,   0, 76,  48 },
    { 72,   0, 77,  64 },
    { 72,   0, 78,  32 },
    { 72,   0, 76,  96 },
    { 72,   0, 59,  32 },
    { 72,   0, 58,  64 },
    { 72,   0, 57,  96 },
    { 72,   0, 57,  48 },
    { 72,   0, 45,  96 },
    { 72,   0, 58,  16 },
    { 72,   0, 40, 112 },
    { 72,   0, 38,  80 },
    { 72,   0, 64,  32 },
    { 72,   0, 63,  64 },
    { 72,   0, 62,  96 },
    { 72,   0, 62,  48 },
    { 72,   0, 61,  80 },
    { 72,   0, 60,  64 },
    { 72,   0, 59,  96 },
    { 72,   0, 59,  48 },
    { 72,   0, 58,  80 },
    { 72,   0, 57,  64 },
    { 72,   0, 54,  64 },
    { 72,   0, 53,  48 },
    { 72,   0, 65,  64 },
    { 72,   0, 55,  32 },
    { 72,   0, 56,  48 },
    { 72,   0, 61,  32 },
    { 72,   0, 58,  32 },
    { 72,   0, 57,  16 },
    { 72,   0, 55,  80 },
    { 72,   0,  4,  96 },
    { 72,   0,  5,  96 },
    { 72,   0, 35,  98 },
    { 72,   0, 28,  98 },
    { 72,   0, 35,  38 },
    { 72,   0, 28,  38 },
    { 72,   0, 34, 106 },
    { 72,   0, 27, 106 },
    { 72,   0, 34,  76 },
    { 72,   0, 27,  76 },
    { 72,   0, 34,  46 },
    { 72,   0, 27,  46 },
    { 72,   0, 33, 114 },
    { 72,   0, 26, 114 },
    { 72,   0, 33,  84 },
    { 72,   0, 26,  84 },
    { 72,   0, 33,  54 },
    { 72,   0, 26,  54 },
    { 72,   0, 32, 122 },
    { 72,   0, 25, 122 },
    { 72,   0, 32,  62 },
    { 72,   0, 25,  62 },
    { 72,   0, 32,   2 },
    { 72,   0, 25,   2 },
    { 72,   0, 31, 100 },
    { 72,   0, 24, 100 },
    { 72,   0, 31,  10 },
    { 72,   0, 24,  10 },
    { 72,   0, 30,  78 },
    { 72,   0, 23,  78 },
    { 72,   0, 29, 116 },
    { 72,   0, 22, 116 },
    { 72,   0, 29,  26 },
    { 72,   0, 22,  26 },
    { 72,   0, 28,  94 },
    { 72,   0, 21,  94 },
    { 72,   0, 28,  34 },
    { 72,   0, 21,  34 },
    { 72,   0, 27, 102 },
    { 72,   0, 20, 102 },
    { 72,   0, 27,  42 },
    { 72,   0, 20,  42 },
    { 72,   0, 27,  12 },
    { 72,   0, 20,  12 },
    { 72,   0, 26, 110 },
    { 72,   0, 19, 110 },
    { 72,   0, 26,  20 },
    { 72,   0, 19,  20 },
    { 72,   0, 25, 118 },
    { 72,   0, 18, 118 },
    { 72,   0, 18,  88 },
    { 72,   0, 25,  58 },
    { 72,   0, 18,  58 },
    { 72,   0, 25,  28 },
    { 72,   0, 18,  28 },
    { 72,   0, 22,  88 },
    { 72,   0, 22,  58 },
    { 72,   0, 22,  28 },
    { 72,   0, 23,  20 },
    { 72,   0, 21,   4 },
    { 72,   0, 28,   4 },
    { 72,   0, 21, 124 },
    { 72,   0, 28, 124 },
    { 72,   0, 22,  86 },
    { 72,   0, 29,  86 },
    { 72,   0, 19,  50 },
    { 72,   0, 31,  50 },
    { 72,   0, 30,  50 },
    { 72,   0, 33,  50 },
    { 72,   0, 31,  12 },
    { 72,   0, 34,  12 },
    { 72,   0, 32,  12 },
    { 72,   0, 31,  72 },
    { 72,   0, 32,  72 },
    { 72,   0, 34, 102 },
    { 72,   0, 31, 102 },
    { 72,   0, 32, 102 },
    { 72,   0, 35,   4 },
    { 72,   0, 32,   4 },
    { 72,   0, 33,   4 },
    { 72,   0, 35, 124 },
    { 72,   0, 32, 124 },
    { 72,   0, 33, 124 },
    { 72,   0, 36,  26 },
    { 72,   0, 33,  26 },
    { 72,   0, 34,  26 },
    { 72,   0, 36,  86 },
    { 72,   0, 33,  86 },
    { 72,   0, 34,  86 },
    { 72,   0, 36, 116 },
    { 72,   0, 33, 116 },
    { 72,   0, 34, 116 },
    { 72,   0, 23,  18 },
    { 72,   0, 37,  18 },
    { 72,   0, 34,  18 },
    { 72,   0, 35,  18 },
    { 72,   0, 23, 108 },
    { 72,   0, 37, 108 },
    { 72,   0, 34, 108 },
    { 72,   0, 35, 108 },
    { 72,   0, 30,  18 },
    { 72,   0, 37,  78 },
    { 72,   0, 34,  78 },
    { 72,   0, 35,  78 },
    { 72,   0, 38,  10 },
    { 72,   0, 35,  10 },
    { 72,   0, 36,  10 },
    { 72,   0, 31,  70 },
    { 72,   0, 24,  70 },
    { 72,   0, 38,  70 },
    { 72,   0, 35,  70 },
    { 72,   0, 36,  70 },
    { 72,   0, 38, 100 },
    { 72,   0, 35, 100 },
    { 72,   0, 36, 100 },
    { 72,   0, 39,  62 },
    { 72,   0, 36,  62 },
    { 72,   0, 37,  62 },
    { 72,   0, 39,   2 },
    { 72,   0, 36,   2 },
    { 72,   0, 37,   2 },
    { 72,   0, 29,   2 },
    { 72,   0, 29,  62 },
    { 72,   0, 29, 122 },
    { 72,   0, 39, 122 },
    { 72,   0, 36, 122 },
    { 72,   0, 37, 122 },
    { 72,   0, 30,  54 },
    { 72,   0, 40,  54 },
    { 72,   0, 37,  54 },
    { 72,   0, 38,  54 },
    { 72,   0, 30,  84 },
    { 72,   0, 40,  84 },
    { 72,   0, 37,  84 },
    { 72,   0, 38,  84 },
    { 72,   0, 30, 114 },
    { 72,   0, 40, 114 },
    { 72,   0, 37, 114 },
    { 72,   0, 38, 114 },
    { 72,   0, 31,  46 },
    { 72,   0, 41,  46 },
    { 72,   0, 38,  46 },
    { 72,   0, 39,  46 },
    { 72,   0, 31,  76 },
    { 72,   0, 41,  76 },
    { 72,   0, 38,  76 },
    { 72,   0, 39,  76 },
    { 72,   0, 29,  76 },
    { 72,   0, 30,   8 },
    { 72,   0, 42,   8 },
    { 72,   0, 40,   8 },
    { 72,   0, 27,  98 },
    { 72,   0, 27,  38 },
    { 72,   0, 26, 106 },
    { 72,   0, 26,  76 },
    { 72,   0, 26,  46 },
    { 72,   0, 25, 114 },
    { 72,   0, 25,  84 },
    { 72,   0, 25,  54 },
    { 72,   0, 24, 122 },
    { 72,   0, 24,  62 },
    { 72,   0, 24,   2 },
    { 72,   0, 23, 100 },
    { 72,   0, 23,  40 },
    { 72,   0, 23,  10 },
    { 72,   0, 22,  78 },
    { 72,   0, 21, 116 },
    { 72,   0, 21,  26 },
    { 72,   0, 20,  94 },
    { 72,   0, 20,  34 },
    { 72,   0, 19, 102 },
    { 72,   0, 19,  42 },
    { 72,   0, 19,  12 },
    { 72,   0, 18, 110 },
    { 72,   0, 18,  20 },
    { 72,   0, 17, 118 },
    { 72,   0, 17,  88 },
    { 72,   0, 17,  58 },
    { 72,   0, 17,  28 },
    { 72,   0, 30,  56 },
    { 72,   0, 31,  56 },
    { 72,   0, 57,  56 },
    { 72,   0, 43,  56 },
    { 72,   0, 45,  56 },
    { 72,   0, 29, 120 },
    { 72,   0, 31, 120 },
    { 72,   0, 43, 120 },
    { 72,   0, 28, 120 },
    { 72,   0, 55, 120 },
    { 72,   0, 41, 120 },
    { 72,   0, 29,  72 },
    { 72,   0, 43,  72 },
    { 72,   0, 28,  72 },
    { 72,   0, 55,  72 },
    { 72,   0, 41,  72 },
    { 72,   0, 31,   8 },
    { 72,   0, 33,   8 },
    { 72,   0, 45,   8 },
    { 72,   0, 57,   8 },
    { 72,   0, 43,   8 },
    { 72,   0, 31, 104 },
    { 72,   0, 45, 104 },
    { 72,   0, 30, 104 },
    { 72,   0, 33, 104 },
    { 72,   0, 57, 104 },
    { 72,   0, 43, 104 },
    { 72,   0, 32,  24 },
    { 72,   0, 46,  24 },
    { 72,   0, 31,  24 },
    { 72,   0, 34,  24 },
    { 72,   0, 58,  24 },
    { 72,   0, 44,  24 },
    { 72,   0, 46,  72 },
    { 72,   0, 58,  72 },
    { 72,   0, 44,  72 },
    { 72,   0, 32, 120 },
    { 72,   0, 46, 120 },
    { 72,   0, 58, 120 },
    { 72,   0, 44, 120 },
    { 72,   0, 33,  88 },
    { 72,   0, 47,  88 },
    { 72,   0, 32,  88 },
    { 72,   0, 59,  88 },
    { 72,   0, 45,  88 },
    { 72,   0, 34,   8 },
    { 72,   0, 48,   8 },
    { 72,   0, 60,   8 },
    { 72,   0, 46,   8 },
    { 72,   0, 48,  56 },
    { 72,   0, 60,  56 },
    { 72,   0, 46,  56 },
    { 72,   0, 34, 104 },
    { 72,   0, 48, 104 },
    { 72,   0, 60, 104 },
    { 72,   0, 46, 104 },
    { 72,   0, 35,  24 },
    { 72,   0, 49,  24 },
    { 72,   0, 61,  24 },
    { 72,   0, 47,  24 },
    { 72,   0, 49,  72 },
    { 72,   0, 61,  72 },
    { 72,   0, 47,  72 },
    { 72,   0, 47,  40 },
    { 72,   0, 59,  40 },
    { 72,   0, 45,  40 },
    { 72,   0, 30,  88 },
    { 72,   0, 44,  88 },
    { 72,   0, 29,  88 },
    { 72,   0, 56,  88 },
    { 72,   0, 42,  88 },
    { 72,   0, 30,  40 },
    { 72,   0, 44,  40 },
    { 72,   0, 29,  40 },
    { 72,   0, 56,  40 },
    { 72,   0, 42,  40 },
    { 72,   0, 29,  24 },
    { 72,   0, 43,  24 },
    { 72,   0, 28,  24 },
    { 72,   0, 55,  24 },
    { 72,   0, 41,  24 },
    { 72,   0, 25,  40 },
    { 72,   0, 24, 120 },
    { 72,   0, 16,  72 },
    { 72,   0, 18,   8 },
    { 72,   0, 18, 104 },
    { 72,   0, 19,  24 },
    { 72,   0, 20,  40 },
    { 72,   0, 22, 120 },
    { 72,   0, 24,  56 },
    { 72,   0, 36,  24 },
    { 72,   0, 52,  24 },
    { 72,   0, 50,  24 },
    { 72,   0, 69,  24 },
    { 72,   0, 36,  72 },
    { 72,   0, 52,  72 },
    { 72,   0, 50,  72 },
    { 72,   0, 69,  72 },
    { 72,   0, 36, 120 },
    { 72,   0, 52, 120 },
    { 72,   0, 50, 120 },
    { 72,   0, 47, 120 },
    { 72,   0, 69, 120 },
    { 72,   0, 37,  40 },
    { 72,   0, 53,  40 },
    { 72,   0, 51,  40 },
    { 72,   0, 48,  40 },
    { 72,   0, 70,  40 },
    { 72,   0, 70,  64 },
    { 72,   0, 37,  88 },
    { 72,   0, 53,  88 },
    { 72,   0, 51,  88 },
    { 72,   0, 48,  88 },
    { 72,   0, 70,  88 },
    { 72,   0, 54,   8 },
    { 72,   0, 52,   8 },
    { 72,   0, 49,   8 },
    { 72,   0, 54,  56 },
    { 72,   0, 52,  56 },
    { 72,   0, 49,  56 },
    { 72,   0, 40,  56 },
    { 72,   0, 54, 104 },
    { 72,   0, 52, 104 },
    { 72,   0, 49, 104 },
    { 72,   0, 40, 104 },
    { 72,   0, 53,  24 },
    { 72,   0, 58, 104 },
    { 72,   0, 59, 104 },
    { 72,   0, 63, 104 },
    { 72,   0, 66, 104 },
    { 72,   0, 51, 104 },
    { 72,   0, 58,  56 },
    { 72,   0, 59,  56 },
    { 72,   0, 63,  56 },
    { 72,   0, 66,  56 },
    { 72,   0, 51,  56 },
    { 72,   0, 38,   8 },
    { 72,   0, 38,  56 },
    { 72,   0, 38, 104 },
    { 72,   0, 39,  24 },
    { 72,   0, 39,  72 },
    { 72,   0, 39, 120 },
    { 72,   0, 40,  88 },
    { 72,   0, 41,   8 },
    { 72,   0, 41,  56 },
    { 72,   0, 41, 104 },
    { 72,   0, 42,  24 },
    { 72,   0, 42,  72 },
    { 72,   0, 40,  40 },
    { 72,   0, 48,  24 },
    { 72,   0, 48,  72 },
    { 72,   0, 48, 120 },
    { 72,   0, 49,  40 },
    { 72,   0, 49,  88 },
    { 72,   0, 50,  88 },
    { 72,   0, 58,  88 },
    { 72,   0, 50,  40 },
    { 72,   0, 58,  40 },
    { 72,   0, 57,  72 },
    { 72,   0, 57,  24 },
    { 72,   0, 60,  24 },
    { 72,   0, 60,  72 },
    { 72,   0, 60, 120 },
    { 72,   0, 61,  40 },
    { 72,   0, 61,  88 },
    { 72,   0, 62,   8 },
    { 72,   0, 62,  56 },
    { 72,   0, 62, 104 },
    { 72,   0, 63,  24 },
    { 72,   0, 63,  72 },
    { 72,   0, 63, 120 },
    { 72,   0, 64,  88 },
    { 72,   0, 65,   8 },
    { 72,   0, 65,  56 },
    { 72,   0, 65, 104 },
    { 72,   0, 66,  24 },
    { 72,   0, 66,  72 },
    { 72,   0, 64,  40 },
    { 72,   0, 56,   8 },
    { 72,   0, 55,  88 },
    { 72,   0, 55,  40 },
    { 72,   0, 54,  24 },
    { 72,   0, 53, 104 },
    { 72,   0, 53,  56 },
    { 72,   0, 52,  40 },
    { 72,   0, 51,  72 },
    { 72,   0, 51,  24 },
    { 72,   0, 50, 104 },
    { 72,   0, 50,   8 },
    { 72,   0, 47, 104 },
    { 72,   0, 47,   8 },
    { 72,   0, 46,  88 },
    { 72,   0, 46,  40 },
    { 72,   0, 45, 120 },
    { 72,   0, 45,  72 },
    { 72,   0, 45,  24 },
    { 72,   0, 47,  56 },
    { 72,   0, 50,  56 },
    { 72,   0, 49, 120 },
    { 72,   0, 57, 120 },
    { 72,   0, 53,  72 },
    { 72,   0, 53, 120 },
    { 72,   0, 54,  72 },
    { 72,   0, 54, 120 },
    { 72,   0, 54,  88 },
    { 72,   0, 55,   8 },
    { 72,   0, 55,  56 },
    { 72,   0, 55, 104 },
    { 72,   0, 56,  24 },
    { 72,   0, 56,  72 },
    { 72,   0, 54,  40 },
    { 72,   0, 59,   8 },
    { 72,   0, 58,   8 },
    { 72,   0, 57,  88 },
    { 72,   0, 57,  40 },
    { 72,   0, 62,  88 },
    { 72,   0, 65,  88 },
    { 72,   0, 62,  40 },
    { 72,   0, 65,  40 },
    { 72,   0, 67,  24 },
    { 72,   0, 67,  72 },
    { 72,   0, 67, 120 },
    { 72,   0, 68,  40 },
    { 72,   0, 68,  88 },
    { 72,   0, 69,   8 },
    { 72,   0, 69,  56 },
    { 72,   0, 69, 104 },
    { 72,   0, 70,  24 },
    { 72,   0, 70,  72 },
    { 72,   0, 70, 120 },
    { 72,   0, 71,  88 },
    { 72,   0, 72,   8 },
    { 72,   0, 72,  56 },
    { 72,   0, 72, 104 },
    { 72,   0, 73,  24 },
    { 72,   0, 73,  72 },
    { 72,   0, 71,  40 },
    { 72,   0, 56,  56 },
    { 72,   0, 56, 104 },
    { 72,   0, 51,   8 },
    { 72,   0, 42, 120 },
    { 72,   0, 61, 104 },
    { 72,   0, 61,  56 },
    { 72,   0, 108,   0 },
    { 72,   0, 107,   0 },
    { 72,   0, 103,   0 },
    { 72,   0, 100,   0 },
    { 72,   0, 115,   0 },
    { 72,   0, 112,   0 },
    { 72,   0, 105,   0 },
    { 72,   0, 110,   0 },
    { 72,   0, 117,   0 },
    { 72,   0, 99,   0 },
    { 72,   0, 102,   0 },
    { 72,   0, 106,   0 },
    { 72,   0, 113,   0 },
    { 72,   0, 114,   0 },
    { 72,   0, 120,   0 },
    { 72,   0, 111,   0 },
    { 72,   0, 109,   0 },
    { 72,   0, 104,   0 },
    { 72,   0, 51, 120 },
    { 72,   0, 52,  88 },
    { 72,   0, 53,   8 },
    { 72,   0, 66, 120 },
    { 72,   0, 61, 120 },
    { 72,   0, 67,  40 },
    { 72,   0, 68,   8 },
    { 72,   0, 63,   8 },
    { 72,   0, 68,  56 },
    { 72,   0, 64, 120 },
    { 72,   0, 66,   8 },
    { 72,   0, 71,  56 },
    { 72,   0, 71,   8 },
    { 72,   0, 64,  72 },
    { 72,   0, 64,  24 },
    { 72,   0, 68, 104 },
    { 72,   0, 67,  88 },
    { 84,   0, 81,   0 },
    { 72,   0, 42,  56 },
    { 72,   0, 42, 104 },
    { 72,   0, 19, 104 },
    { 72,   0, 19,  56 },
    { 72,   0, 19,   8 },
    { 72,   0, 18,  40 },
    { 72,   0, 17, 120 },
    { 72,   0, 17,  72 },
    { 72,   0, 71,  32 },
{ 72,   0, 67, 104 },
    { 72,   0, 68,  48 },
    { 72,   0, 75,  72 },
    { 72,   0, 68,  72 },
    { 72,   0, 59,  72 },
    { 72,   0, 75, 120 },
    { 72,   0, 68, 120 },
    { 72,   0, 73, 120 },
    { 72,   0, 59, 120 },
    { 72,   0, 75,  24 },
    { 72,   0, 68,  24 },
    { 72,   0, 59,  24 },
    { 72,   0, 67,  80 },
    { 72,   0, 67,  32 },
    { 72,   0, 74,   8 },
    { 72,   0, 67,   8 },
    { 72,   0, 73,  88 },
    { 72,   0, 66,  88 },
    { 72,   0, 66,  64 },
    { 72,   0, 74,  40 },
    { 72,   0, 74,  88 },
    { 72,   0, 75,   8 },
    { 72,   0, 75,  56 },
    { 72,   0, 76,  24 },
    { 72,   0, 76,  72 },
    { 72,   0, 76, 120 },
    { 72,   0, 77,  40 },
    { 72,   0, 77,  88 },
    { 72,   0, 44,  56 },
    { 72,   0, 44,   8 },
    { 72,   0, 43,  40 },
    { 72,   0, 20,  24 },
    { 72,   0, 85,  24 },
    { 72,   0, 81,  24 },
    { 72,   0, 74,  24 },
    { 72,   0, 88,  24 },
    { 72,   0, 83,  24 },
    { 72,   0, 86,  24 },
    { 72,   0, 82,  24 },
    { 72,   0, 86,  48 },
    { 72,   0, 88,  48 },
    { 72,   0, 83,  48 },
    { 72,   0, 92,  48 },
    { 72,   0, 88,  96 },
    { 72,   0, 92,  96 },
    { 72,   0, 89,  16 },
    { 72,   0, 93,  16 },
    { 72,   0, 89,  64 },
    { 72,   0, 93,  64 },
    { 72,   0, 82,  64 },
    { 72,   0, 89, 112 },
    { 72,   0, 93, 112 },
    { 72,   0, 82, 112 },
    { 72,   0, 90,   8 },
    { 72,   0, 94,   8 },
    { 72,   0, 78,   8 },
    { 72,   0, 83,   8 },
    { 72,   0, 64,   8 },
    { 72,   0, 90,  32 },
    { 72,   0, 94,  32 },
    { 72,   0, 83,  32 },
    { 72,   0, 90,  56 },
    { 72,   0, 94,  56 },
    { 72,   0, 78,  56 },
    { 72,   0, 83,  56 },
    { 72,   0, 64,  56 },
    { 72,   0, 90,  80 },
    { 72,   0, 94,  80 },
    { 72,   0, 83,  80 },
    { 72,   0, 90, 104 },
    { 72,   0, 94, 104 },
    { 72,   0, 78, 104 },
    { 72,   0, 83, 104 },
    { 72,   0, 64, 104 },
    { 72,   0, 65,  24 },
    { 72,   0, 65,  48 },
    { 72,   0, 65,  72 },
    { 72,   0, 65, 120 },
    { 72,   0, 66,  40 },
    { 72,   0, 67,  56 },
    { 72,   0, 69,  16 },
    { 72,   0, 69,  40 },
    { 72,   0, 69,  88 },
    { 72,   0, 70,   8 },
    { 72,   0, 70,  32 },
    { 72,   0, 70,  56 },
    { 72,   0, 70,  80 },
    { 72,   0, 71,  48 },
    { 72,   0, 71,  72 },
    { 72,   0, 71,  96 },
    { 72,   0, 18,  56 },
    { 72,   0, 16, 120 },
    { 72,   0, 17,  40 },
    { 72,   0, 77,  72 },
    { 72,   0, 77,  24 },
    { 72,   0, 76, 104 },
    { 72,   0, 76,   8 },
    { 72,   0, 75,  88 },
    { 72,   0, 75,  40 },
    { 72,   0, 74,  72 },
    { 72,   0, 73, 104 },
    { 72,   0, 73,  56 },
    { 72,   0, 73,  32 },
    { 72,   0, 72,  64 },
    { 72,   0, 73,   8 },
    { 72,   0, 72,  40 },
    { 72,   0, 60,  40 },
    { 72,   0, 61,   8 },
    { 72,   0, 63,  88 },
    { 72,   0, 71, 104 },
    { 72,   0, 72,  24 },
    { 72,   0, 72,  72 },
    { 72,   0, 72, 120 },
    { 72,   0, 73,  40 },
    { 72,   0, 74,  56 },
    { 72,   0, 74, 104 },
    { 72,   0, 76,  40 },
    { 72,   0, 69,  64 },
    { 72,   0, 76,  88 },
    { 72,   0, 77,   8 },
    { 72,   0, 77,  56 },
    { 72,   0, 77, 104 },
    { 72,   0, 70, 104 },
    { 72,   0, 78,  24 },
    { 72,   0, 71,  24 },
    { 72,   0, 78,  72 },
    { 72,   0, 75, 104 },
    { 72,   0, 63,  40 },
    { 72,   0, 62,  72 },
    { 72,   0, 62,  24 },
    { 72,   0, 62, 120 },
    { 72,   0, 56, 120 },
    { 72,   0, 60,  88 },
    { 72,   0, 71, 120 },
    { 72,   0, 72,  88 },
    { 72,   0, 43,  88 },
    { 72,   0, 73,  80 },
    { 72,   0, 44, 104 },
    { 72,   0, 78, 120 },
    { 72,   0, 79,  40 },
    { 72,   0, 79,  88 },
    { 72,   0, 80, 104 },
    { 72,   0, 80,  56 },
    { 72,   0, 80,   8 },
    { 72,   0, 84,   8 },
    { 72,   0, 84,  56 },
    { 72,   0, 84, 104 },
    { 72,   0, 74, 120 },
    { 72,   0, 84,  24 },
    { 72,   0, 78,  40 },
{ 72,   0, 87, 112 },
    { 72,   0, 85, 112 },
    { 72,   0, 84, 112 },
    { 72,   0, 81,   8 },
    { 72,   0, 85,   8 },
    { 72,   0, 88,   8 },
    { 72,   0, 86,   8 },
    { 72,   0, 79,   8 },
    { 72,   0, 85,  32 },
    { 72,   0, 88,  32 },
    { 72,   0, 86,  32 },
    { 72,   0, 85,  80 },
    { 72,   0, 88,  80 },
    { 72,   0, 86,  80 },
    { 72,   0, 92, 120 },
    { 72,   0, 93,  40 },
    { 72,   0, 93,  88 },
    { 72,   0, 92,  88 },
    { 72,   0, 90,  88 },
    { 72,   0, 88,  88 },
    { 72,   0, 87,  88 },
    { 72,   0, 93,   8 },
    { 72,   0, 91,   8 },
    { 72,   0, 89,   8 },
    { 72,   0, 82,   8 },
    { 72,   0, 93,  32 },
    { 72,   0, 91,  32 },
    { 72,   0, 89,  32 },
    { 72,   0, 82,  32 },
    { 72,   0, 93,  56 },
    { 72,   0, 91,  56 },
    { 72,   0, 89,  56 },
    { 72,   0, 88,  56 },
    { 72,   0, 82,  56 },
    { 72,   0, 81,  88 },
    { 72,   0, 92,  64 },
    { 72,   0, 90,  64 },
    { 72,   0, 88,  64 },
    { 72,   0, 87,  64 },
    { 72,   0, 81,  64 },
    { 72,   0, 92,  40 },
    { 72,   0, 90,  40 },
    { 72,   0, 88,  40 },
    { 72,   0, 87,  40 },
    { 72,   0, 81,  40 },
    { 72,   0, 92,  16 },
    { 72,   0, 90,  16 },
    { 72,   0, 88,  16 },
    { 72,   0, 87,  16 },
    { 72,   0, 91,  96 },
    { 72,   0, 89,  96 },
    { 72,   0, 87,  96 },
    { 72,   0, 86,  96 },
    { 72,   0, 92,  72 },
    { 72,   0, 91,  72 },
    { 72,   0, 89,  72 },
    { 72,   0, 87,  72 },
    { 72,   0, 86,  72 },
    { 72,   0, 80,  72 },
    { 72,   0, 92,  24 },
    { 72,   0, 91,  24 },
    { 72,   0, 89,  24 },
    { 72,   0, 87,  24 },
    { 72,   0, 80,  24 },
    { 72,   0, 91, 104 },
    { 72,   0, 88, 104 },
    { 72,   0, 86, 104 },
    { 72,   0, 85, 104 },
    { 72,   0, 79, 104 },
    { 72,   0, 91,  80 },
    { 72,   0, 86,  56 },
    { 72,   0, 85,  56 },
    { 72,   0, 79,  56 },
    { 72,   0, 90, 112 },
    { 72,   0, 85,  64 },
    { 72,   0, 84,  64 },
    { 72,   0, 85,  16 },
    { 72,   0, 84,  16 },
    { 72,   0, 89, 120 },
    { 72,   0, 88, 120 },
    { 72,   0, 86, 120 },
    { 72,   0, 84, 120 },
    { 72,   0, 83, 120 },
    { 72,   0, 77, 120 },
    { 72,   0, 88,  72 },
    { 72,   0, 84,  72 },
    { 72,   0, 83,  72 },
    { 72,   0, 89,  48 },
    { 72,   0, 84,  48 },
    { 72,   0, 24,  24 },
    { 72,   0, 23, 104 },
    { 72,   0, 23,  56 },
    { 72,   0, 23,   8 },
    { 72,   0, 22,  40 },
    { 72,   0, 21,  72 },
    { 72,   0, 21, 120 },
    { 72,   0, 79,  24 },
    { 72,   0, 96,  24 },
    { 72,   0, 95,  24 },
    { 72,   0, 93,  24 },
    { 72,   0, 79,  72 },
    { 72,   0, 96,  72 },
    { 72,   0, 95,  72 },
    { 72,   0, 93,  72 },
    { 72,   0, 84,  96 },
    { 72,   0, 83,  96 },
    { 72,   0, 96,  96 },
    { 72,   0, 95,  96 },
    { 72,   0, 93,  96 },
    { 72,   0, 79, 120 },
    { 72,   0, 96, 120 },
    { 72,   0, 95, 120 },
    { 72,   0, 93, 120 },
    { 72,   0, 97,  16 },
    { 72,   0, 96,  16 },
    { 72,   0, 94,  16 },
    { 72,   0, 97,  64 },
    { 72,   0, 96,  64 },
    { 72,   0, 94,  64 },
    { 72,   0, 85,  88 },
    { 72,   0, 84,  88 },
    { 72,   0, 80,  88 },
    { 72,   0, 78,  88 },
    { 72,   0, 97,  88 },
    { 72,   0, 96,  88 },
    { 72,   0, 94,  88 },
    { 72,   0, 97, 112 },
    { 72,   0, 96, 112 },
    { 72,   0, 94, 112 },
    { 72,   0, 98,   8 },
    { 72,   0, 97,   8 },
    { 72,   0, 95,   8 },
    { 72,   0, 98,  32 },
    { 72,   0, 97,  32 },
    { 72,   0, 95,  32 },
    { 72,   0, 98,  80 },
    { 72,   0, 97,  80 },
    { 72,   0, 95,  80 },
    { 72,   0, 81, 104 },
    { 72,   0, 98, 104 },
    { 72,   0, 97, 104 },
    { 72,   0, 95, 104 },
    { 72,   0, 99,  24 },
    { 72,   0, 98,  24 },
    { 72,   0, 87,  48 },
    { 72,   0, 99,  48 },
    { 72,   0, 98,  48 },
    { 72,   0, 96,  48 },
    { 72,   0, 82,  72 },
    { 72,   0, 99,  72 },
    { 72,   0, 98,  72 },
    { 72,   0, 99,  96 },
    { 72,   0, 98,  96 },
    { 72,   0, 87, 120 },
    { 72,   0, 82, 120 },
    { 72,   0, 80, 120 },
    { 72,   0, 99, 120 },
    { 72,   0, 98, 120 },
    { 72,   0, 100,  16 },
    { 72,   0, 99,  16 },
    { 72,   0, 83,  40 },
    { 72,   0, 80,  40 },
    { 72,   0, 100,  40 },
    { 72,   0, 99,  40 },
    { 72,   0, 97,  40 },
    { 72,   0, 83,  88 },
    { 72,   0, 100,  88 },
    { 72,   0, 99,  88 },
    { 72,   0, 101,   8 },
    { 72,   0, 100,   8 },
    { 72,   0, 101,  32 },
    { 72,   0, 100,  32 },
    { 72,   0, 91, 120 },
    { 72,   0, 92, 112 },
    { 72,   0, 93,  80 },
    { 72,   0, 93, 104 },
    { 72,   0, 94,  24 },
    { 72,   0, 94,  48 },
    { 72,   0, 94,  72 },
    { 72,   0, 94,  96 },
    { 72,   0, 94, 120 },
    { 72,   0, 95,  16 },
    { 72,   0, 95,  40 },
    { 72,   0, 95,  88 },
    { 72,   0, 96,   8 },
    { 72,   0, 89,  88 },
    { 72,   0, 91,  48 },
    { 72,   0, 96,  32 },
    { 72,   0, 76,  56 },
    { 72,   0, 81,  56 },
    { 72,   0, 98,  56 },
    { 72,   0, 96,  56 },
    { 72,   0, 95,  64 },
    { 72,   0, 95,  56 },
    { 72,   0, 93,  48 },
    { 72,   0, 101,  56 },
    { 72,   0, 100,  56 },
    { 72,   0, 100,  64 },
    { 72,   0, 99,  64 },
    { 72,   0, 97,  56 },
    { 72,   0, 95,  48 },
    { 72,   0, 81, 112 },
    { 72,   0, 82,  40 },
    { 72,   0, 81, 120 },
    { 72,   0, 82,  88 },
    { 72,   0, 81,  72 },
};

// TODO: REMOVE: runs all of the test cases for 'LIBSPU__spu_note2pitch' comparing the original machine code versus PsyDoom's reimplementation
static void runNoteToPitchTests() noexcept {
    for (const n2pTest& test : NOTE_2_PITCH_TESTS) {
        uint16_t result1 = LIBSPU__spu_note2pitch(test.centerNote, test.centerNoteFrac, test.offsetNote, test.offsetNoteFrac);
        uint16_t result2 = LIBSPU__spu_note2pitch_ORIG(test.centerNote, test.centerNoteFrac, test.offsetNote, test.offsetNoteFrac);
        ASSERT(result1 == result2);
    }
}

// TODO: REMOVE: check to see if a test case is covered by the 'LIBSPU__spu_note2pitch' test cases
static bool isNoteToPitchTestCaseTested(
    const int32_t centerNote,
    const int32_t centerNoteFrac,
    const int32_t offsetNote,
    const int32_t offsetNoteFrac
) noexcept {
    for (const n2pTest& test : NOTE_2_PITCH_TESTS) {
        if ((test.centerNote == centerNote) && (test.centerNoteFrac == centerNoteFrac) && (test.offsetNote == offsetNote) && (test.offsetNoteFrac == offsetNoteFrac))
            return true;
    }

    return false;
}

#endif  // #if TEST_NOTE_TO_PITCH

#if PSYDOOM_LIMIT_REMOVING
//------------------------------------------------------------------------------------------------------------------------------------------
// PsyDoom addition: computes the reverb base address (divided by 8) for potentially extended PSX sound ram given a reverb base address in
// terms of the original 512 KB available (and divided by 8). The address returned will be at the end of the extended RAM area, if extended.
//------------------------------------------------------------------------------------------------------------------------------------------
static uint32_t LIBSPU_GetExtReverbBaseAddr(const uint16_t origPsxReverbBaseAddr8) noexcept {
    // TODO: REMOVE: hacking in temporary tests  for 'LIBSPU__spu_note2pitch'
    #if TEST_NOTE_TO_PITCH
        runNoteToPitchTests();
    #endif

    // Note: shouldn't need to lock the SPU for this query since ram size is set on init
    Spu::Core& spu = PsxVm::gSpu;
    uint32_t extBaseAddr8 = spu.ramSize / 8;

    if (extBaseAddr8 > UINT16_MAX) {
        extBaseAddr8 -= UINT16_MAX;     // Reverb area is 512 KiB maximum, at the end of SRAM
    } else {
        extBaseAddr8 = 0;               // SPU ram is not extended, reverb area starts at the start of SRAM
    }

    extBaseAddr8 += origPsxReverbBaseAddr8;
    return extBaseAddr8;
}
#endif  // #if PSYDOOM_LIMIT_REMOVING

//------------------------------------------------------------------------------------------------------------------------------------------
// Set one or more (or all) properties on a voice or voices using the information in the given struct
//------------------------------------------------------------------------------------------------------------------------------------------
void LIBSPU_SpuSetVoiceAttr(const SpuVoiceAttr& attribs) noexcept {
    // Figure out what attributes to set for the specified voices
    const uint32_t attribMask = attribs.attr_mask;

    const bool bSetAllAttribs   = (attribMask == 0);
    const bool bSetPitch        = (bSetAllAttribs || (attribMask & SPU_VOICE_PITCH));
    const bool bSetBaseNote     = (bSetAllAttribs || (attribMask & SPU_VOICE_SAMPLE_NOTE));
    const bool bSetNote         = (bSetAllAttribs || (attribMask & SPU_VOICE_NOTE));
    const bool bSetWaveAddr     = (bSetAllAttribs || (attribMask & SPU_VOICE_WDSA));
    const bool bSetAttackRate   = (bSetAllAttribs || (attribMask & SPU_VOICE_ADSR_AR));
    const bool bSetAttackMode   = (bSetAllAttribs || (attribMask & SPU_VOICE_ADSR_AMODE));
    const bool bSetDecayRate    = (bSetAllAttribs || (attribMask & SPU_VOICE_ADSR_DR));
    const bool bSetSustainLevel = (bSetAllAttribs || (attribMask & SPU_VOICE_ADSR_SL));
    const bool bSetSustainRate  = (bSetAllAttribs || (attribMask & SPU_VOICE_ADSR_SR));
    const bool bSetSustainMode  = (bSetAllAttribs || (attribMask & SPU_VOICE_ADSR_SMODE));
    const bool bSetReleaseRate  = (bSetAllAttribs || (attribMask & SPU_VOICE_ADSR_RR));
    const bool bSetReleaseMode  = (bSetAllAttribs || (attribMask & SPU_VOICE_ADSR_RMODE));
    const bool bSetAdsrPart1    = (bSetAllAttribs || (attribMask & SPU_VOICE_ADSR_ADSR1));
    const bool bSetAdsrPart2    = (bSetAllAttribs || (attribMask & SPU_VOICE_ADSR_ADSR2));
    const bool bSetWaveLoopAddr = (bSetAllAttribs || (attribMask & SPU_VOICE_LSAX));
    const bool bSetVolL         = (bSetAllAttribs || (attribMask & SPU_VOICE_VOLL));
    const bool bSetVolModeL     = (bSetAllAttribs || (attribMask & SPU_VOICE_VOLMODEL));
    const bool bSetVolR         = (bSetAllAttribs || (attribMask & SPU_VOICE_VOLR));
    const bool bSetVolModeR     = (bSetAllAttribs || (attribMask & SPU_VOICE_VOLMODER));

    // Set the required attributes for all specified voices
    Spu::Core& spu = PsxVm::gSpu;
    PsxVm::LockSpu spuLock;

    const SpuVoiceMask voiceBits = attribs.voice_bits;

    for (uint32_t voiceIdx = 0; voiceIdx < spu.numVoices; ++voiceIdx) {
        // Skip this voice if we're not setting its attributes
        if ((voiceBits & (SpuVoiceMask(1) << voiceIdx)) == 0)
            continue;

        // Set: voice 'pitch' or sample rate. Note that '4,096' = '44,100 Hz'.
        Spu::Voice& voice = spu.pVoices[voiceIdx];

        if (bSetPitch) {
            voice.sampleRate = attribs.pitch;
        }

        // Set: voice 'base' note at which the sample rate is regarded to be '44,100 Hz'
        if (bSetBaseNote) {
            gVoiceBaseNotes[voiceIdx] = attribs.sample_note;
        }

        // Set: voice pitch or sample rate from a musical note
        if (bSetNote) {
            // Note: the high 8 bits of these 'note' fields contain the actual semitone, the low 8-bits are 1/128 semitone increments
            const uint16_t baseNote = gVoiceBaseNotes[voiceIdx];
            const uint16_t note = attribs.note;
            const uint16_t sampleRate = LIBSPU__spu_note2pitch(baseNote >> 8, baseNote & 0xFF, note >> 8, note & 0xFF);
            voice.sampleRate = sampleRate;
        }

        // Set: the start address (64-bit word index) for the voice wave data.
        // If the given address is not 64-bit aligned then it is aligned up to the next 64-bit boundary.
        if (bSetWaveAddr) {
            const uint32_t addr = (attribs.addr + 7) / 8;
            voice.adpcmStartAddr8 = addr;
        }

        // Set: attack rate
        if (bSetAttackRate) {
            const uint32_t attackRate = (attribs.ar < 0x7F) ? attribs.ar : 0x7F;
            voice.env.attackStep = (attackRate & 0b0000'0011);
            voice.env.releaseShift = (attackRate & 0b0111'1100) >> 2;

            // Set: attack rate mode (exponential or not).
            // If not specified then default to 'linear' increase mode.
            if (bSetAttackMode) {
                voice.env.bAttackExp = (attribs.a_mode == SPU_VOICE_EXPIncN) ? 1 : 0;
            } else {
                voice.env.bAttackExp = 0;
            }
        }

        // Set: decay rate
        if (bSetDecayRate) {
            voice.env.decayShift = (attribs.dr < 0xF) ? attribs.dr : 0xF;
        }

        // Set: sustain level
        if (bSetSustainLevel) {
            voice.env.sustainLevel = (attribs.sl < 0xF) ? attribs.sl : 0xF;
        }

        // Set: sustain rate
        if (bSetSustainRate) {
            const uint32_t sustainRate = (attribs.sr < 0x7F) ? attribs.sr : 0x7F;
            voice.env.sustainStep = (sustainRate & 0b0000'0011);
            voice.env.sustainShift = (sustainRate & 0b0111'1100) >> 2;

            // Set: sustain rate mode (increase and exponential or not).
            // If not specified then default to 'increase' and NOT 'exponential' mode.
            if (bSetSustainMode) {
                uint8_t dir     = 0;    // 0, 1: increase / decrease
                uint8_t mode    = 0;    // 0, 1: linear / exponential

                // Some of this doesn't make sense to me, but it's what I observed in the original machine code for this function...
                switch (attribs.s_mode) {
                    case SPU_VOICE_DIRECT:      dir = 1;    mode = 0; break;
                    case SPU_VOICE_LINEARIncN:  dir = 0;    mode = 0; break;
                    case SPU_VOICE_LINEARIncR:  dir = 1;    mode = 0; break;
                    case SPU_VOICE_LINEARDecN:  dir = 1;    mode = 0; break;
                    case SPU_VOICE_LINEARDecR:  dir = 1;    mode = 0; break;
                    case SPU_VOICE_EXPIncN:     dir = 0;    mode = 1; break;
                    case SPU_VOICE_EXPIncR:     dir = 1;    mode = 0; break;
                    case SPU_VOICE_EXPDec:      dir = 1;    mode = 1; break;

                    default: break;
                }

                voice.env.bSustainDec = dir;
                voice.env.bSustainExp = mode;
            } else {
                voice.env.bSustainDec = 0;
                voice.env.bSustainExp = 0;
            }
        }

        // Set: release rate
        if (bSetReleaseRate) {
            const uint32_t releaseRate = (attribs.rr < 0x1F) ? attribs.rr : 0x1F;
            voice.env.releaseShift = releaseRate;

            // Set: release rate mode (exponential or not).
            // If not specified then default to 'linear' mode.
            voice.env.bReleaseExp = 0;

            if (bSetReleaseMode) {
                if (attribs.r_mode == SPU_VOICE_EXPDec) {
                    voice.env.bReleaseExp = 1;
                }
            }
        }

        // Set: envelope ADSR directly (1st and 2nd 16-bits)
        if (bSetAdsrPart1) {
            voice.envBits &= 0xFFFF0000;
            voice.envBits |= (uint32_t) attribs.adsr1;
        }

        if (bSetAdsrPart2) {
            voice.envBits &= 0x0000FFFF;
            voice.envBits |= ((uint32_t) attribs.adsr2) << 16;
        }

        // Set: wave loop address (64-bit word index).
        // If the given address is not 64-bit aligned then it is aligned up to the next 64-bit boundary.
        if (bSetWaveLoopAddr) {
            const uint32_t addr = (attribs.loop_addr + 7) / 8;
            voice.adpcmRepeatAddr8 = addr;
        }

        // Set: left volume and mode
        if (bSetVolL) {
            const uint16_t mode = (bSetVolModeL) ? attribs.volmode.left : 0;

            if (mode == 0) {
                voice.volume.left = attribs.volume.left & 0x7FFF;
            } else {
                const uint16_t volBits = (attribs.volume.left < 0x7F) ? attribs.volume.left : 0x7F;
                const uint16_t modeBits = 0x8000 | ((mode - 1) << 12);
                voice.volume.left = modeBits | volBits;
            }
        }

        // Set: right volume and mode
        if (bSetVolR) {
            const uint16_t mode = (bSetVolModeR) ? attribs.volmode.right : 0;

            if (mode == 0) {
                voice.volume.right = attribs.volume.right & 0x7FFF;
            } else {
                const uint16_t volBits = (attribs.volume.right < 0x7F) ? attribs.volume.right : 0x7F;
                const uint16_t modeBits = 0x8000 | ((mode - 1) << 12);
                voice.volume.right = modeBits | volBits;
            }
        }
    }
}

// TODO: move elsewhere
static const uint16_t OCTAVE_SAMPLE_RATES[] = {
    0x1000,
    0x100E,
    0x101D,
    0x102C,
    0x103B,
    0x104A,
    0x1059,
    0x1068,
    0x1078,
    0x1087,
    0x1096,
    0x10A5,
    0x10B5,
    0x10C4,
    0x10D4,
    0x10E3,
    0x10F3,
    0x1103,
    0x1113,
    0x1122,
    0x1132,
    0x1142,
    0x1152,
    0x1162,
    0x1172,
    0x1182,
    0x1193,
    0x11A3,
    0x11B3,
    0x11C4,
    0x11D4,
    0x11E5,
    0x11F5,
    0x1206,
    0x1216,
    0x1227,
    0x1238,
    0x1249,
    0x125A,
    0x126B,
    0x127C,
    0x128D,
    0x129E,
    0x12AF,
    0x12C1,
    0x12D2,
    0x12E3,
    0x12F5,
    0x1306,
    0x1318,
    0x132A,
    0x133C,
    0x134D,
    0x135F,
    0x1371,
    0x1383,
    0x1395,
    0x13A7,
    0x13BA,
    0x13CC,
    0x13DE,
    0x13F1,
    0x1403,
    0x1416,
    0x1428,
    0x143B,
    0x144E,
    0x1460,
    0x1473,
    0x1486,
    0x1499,
    0x14AC,
    0x14BF,
    0x14D3,
    0x14E6,
    0x14F9,
    0x150D,
    0x1520,
    0x1534,
    0x1547,
    0x155B,
    0x156F,
    0x1583,
    0x1597,
    0x15AB,
    0x15BF,
    0x15D3,
    0x15E7,
    0x15FB,
    0x1610,
    0x1624,
    0x1638,
    0x164D,
    0x1662,
    0x1676,
    0x168B,
    0x16A0,
    0x16B5,
    0x16CA,
    0x16DF,
    0x16F4,
    0x170A,
    0x171F,
    0x1734,
    0x174A,
    0x175F,
    0x1775,
    0x178B,
    0x17A1,
    0x17B6,
    0x17CC,
    0x17E2,
    0x17F9,
    0x180F,
    0x1825,
    0x183B,
    0x1852,
    0x1868,
    0x187F,
    0x1896,
    0x18AC,
    0x18C3,
    0x18DA,
    0x18F1,
    0x1908,
    0x191F,
    0x1937,
    0x194E,
    0x1965,
    0x197D,
    0x1995,
    0x19AC,
    0x19C4,
    0x19DC,
    0x19F4,
    0x1A0C,
    0x1A24,
    0x1A3C,
    0x1A55,
    0x1A6D,
    0x1A85,
    0x1A9E,
    0x1AB7,
    0x1ACF,
    0x1AE8,
    0x1B01,
    0x1B1A,
    0x1B33,
    0x1B4C,
    0x1B66,
    0x1B7F,
    0x1B98,
    0x1BB2,
    0x1BCC,
    0x1BE5,
    0x1BFF,
    0x1C19,
    0x1C33,
    0x1C4D,
    0x1C67,
    0x1C82,
    0x1C9C,
    0x1CB7,
    0x1CD1,
    0x1CEC,
    0x1D07,
    0x1D22,
    0x1D3D,
    0x1D58,
    0x1D73,
    0x1D8E,
    0x1DA9,
    0x1DC5,
    0x1DE0,
    0x1DFC,
    0x1E18,
    0x1E34,
    0x1E50,
    0x1E6C,
    0x1E88,
    0x1EA4,
    0x1EC1,
    0x1EDD,
    0x1EFA,
    0x1F16,
    0x1F33,
    0x1F50,
    0x1F6D,
    0x1F8A,
    0x1FA7,
    0x1FC5,
    0x1FE2,
    0x2000,
};

// TODO: REMOVE: original version of 'LIBSPU__spu_note2pitch'
uint16_t LIBSPU__spu_note2pitch_ORIG(
    const int32_t centerNote,
    const int32_t centerNoteFrac,
    const int32_t offsetNote,
    const int32_t offsetNoteFrac
) noexcept
{
loc_80050FBC:
    uint32_t a0, a1, a2, a3, v0, v1, t0, at;

    a0 = centerNote;
    a1 = centerNoteFrac;
    a2 = offsetNote;
    a3 = offsetNoteFrac;

    a3 &= 0xFFFF;
    a1 &= 0xFFFF;
    v0 = a3 + a1;
    t0 = a0;
    if (int32_t(v0) >= 0) goto loc_80050FD4;
    v0 += 7;
loc_80050FD4:
    v0 = uint32_t(int32_t(v0) >> 3);
    a1 = v0;
    v0 = (int32_t(v0) < 0x10);
    v1 = 0;                                             // Result = 00000000
    if (v0 != 0) goto loc_80051004;
loc_80050FE8:
    v0 = a1 - 0x10;
    a1 = v0;
    v0 <<= 16;
    v0 = uint32_t(int32_t(v0) >> 16);
    v0 = (int32_t(v0) < 0x10);
    v1++;
    if (v0 == 0) goto loc_80050FE8;
loc_80051004:
    v0 = a1 << 16;
    a0 = 0x2AAA0000;                                    // Result = 2AAA0000
    if (int32_t(v0) >= 0) goto loc_80051014;
    a1 = 0;                                             // Result = 00000000
loc_80051014:
    a0 |= 0xAAAB;                                       // Result = 2AAAAAAB
    v0 = a2 + 0x3C;
    v0 -= t0;
    v0 += v1;
    v0 <<= 16;
    
    #if 1 
        v1 = uint32_t(int32_t(v0) >> 16);
        const int64_t mulResult = ((int64_t)((int32_t) v1)) * ((int64_t)((int32_t) a0));
        v0 = uint32_t(int32_t(v0) >> 31);
        a0 = (uint64_t) mulResult >> 32;
    #else
        v1 = uint32_t(int32_t(v0) >> 16);
        mult(v1, a0);
        v0 = uint32_t(int32_t(v0) >> 31);
        a0 = hi;
    #endif

    a0 = uint32_t(int32_t(a0) >> 1);
    a0 -= v0;
    v0 = a0 << 1;
    v0 += a0;
    v0 <<= 2;
    v1 -= v0;
    v1 <<= 16;
    v1 = uint32_t(int32_t(v1) >> 12);
    v0 = a1 << 16;
    v0 = uint32_t(int32_t(v0) >> 16);
    v1 += v0;
    v1 <<= 1;
    at = 0x80070000;                                    // Result = 80070000
    at += 0x6880;                                       // Result = 80076880
    at += v1;
    
    #if 1
        v1 = OCTAVE_SAMPLE_RATES[(v1 / sizeof(uint16_t)) % 192];
    #else
        v1 = lhu(at);
    #endif
    
    a0 -= 5;
    a0 <<= 16;
    v0 = uint32_t(int32_t(a0) >> 16);
    if (int32_t(v0) <= 0) goto loc_80051094;
    v1 = v1 << v0;
    goto loc_800510A8;
loc_80051094:
    if (int32_t(v0) >= 0) goto loc_800510A8;
    v1 &= 0xFFFF;
    v0 = -v0;
    v1 = int32_t(v1) >> v0;
loc_800510A8:
    v0 = v1 & 0xFFFF;

    return (uint16_t) v0;
}

// TODO: FINISH: PsyDoom's new reimplementation of 'LIBSPU__spu_note2pitch'
uint16_t LIBSPU__spu_note2pitch(
    const int32_t centerNote,
    const uint16_t centerNoteFrac,
    const int32_t offsetNote,
    const uint16_t offsetNoteFrac
) noexcept
{
    // TODO: REMOVE: is this 'note to pitch' test case covered?
    #if TEST_NOTE_TO_PITCH
        if (!isNoteToPitchTestCaseTested(centerNote, centerNoteFrac, offsetNote, offsetNoteFrac)) {
            std::printf("{ %2d, %3d, %2d, %3d },\n", centerNote, centerNoteFrac, offsetNote, offsetNoteFrac);
        }
    #endif

    constexpr int32_t ROOT_NOTE = 60;
    constexpr int32_t ROOT_OCTAVE = ROOT_NOTE / 12;

    const int32_t noteFracUnwrapped = offsetNoteFrac + centerNoteFrac;
    const int32_t noteFrac = (noteFracUnwrapped >> 3) & 0xF;

    const int32_t note = offsetNote - centerNote + ROOT_NOTE + noteFracUnwrapped / 128;
    const int32_t octave = (int32_t) note / 12;
    const int32_t octaveStartNote = octave * 12;
    const uint32_t lutIndex = (((note - octaveStartNote) << 4) | noteFrac) & 0x7FFFFFF;
    
    const uint16_t baseSampleRate = OCTAVE_SAMPLE_RATES[lutIndex % 192];
    const int32_t octaveShift = octave - ROOT_OCTAVE;
    
    if (octaveShift > 0) {
        return baseSampleRate << +octaveShift;
    } else if (octaveShift < 0) {
        return baseSampleRate >> -octaveShift;
    } else {
        return baseSampleRate;
    }
}

// TODO: REMOVE: the initial reimplementation of 'LIBSPU__spu_note2pitch' that PsyDoom had, which occasionally produces incorrect results
#if false
//------------------------------------------------------------------------------------------------------------------------------------------
// Internal LIBSPU function which converts a musical note to a frequency that can be set on a voice.
// The returned integer frequency is such that 4,096 units = 44,100 Hz.
//
// Params:
//  baseNote:       Note at which the frequency is considered 44,100 Hz.
//                  For example '60' would be C5 (12 semitones per octave, 1st note of 5th octave).
//  baseNoteFrac:   Fractional offset to 'baseNote' in 1/128 units.
//  note:           The note to get the frequency for.
//  noteFrac:       Fractional offset to 'note' in 1/128 units.
//------------------------------------------------------------------------------------------------------------------------------------------
uint16_t LIBSPU__spu_note2pitch(
    const int32_t baseNote,
    const int32_t baseNoteFrac,
    const int32_t note,
    const int32_t noteFrac
) noexcept {
    // Note: this implementation is COMPLETELY different to the original LIBSPU version.
    // That version used lookup tables of some sort to figure out the calculation.
    //
    // This re-implementation produces almost identical results, but is much easier to comprehend.
    // The trade off is that it's a good bit slower due to use of 'pow' - but that's not really a concern on modern systems.
    // I could take the time to fully understand and reverse the original method, but it's probably not worth it..
    const float baseNoteF   = baseNote + (float) baseNoteFrac / 128.0f;
    const float noteF       = note + (float) noteFrac / 128.0f;
    const float noteOffsetF = noteF - baseNoteF;

    // For a good explantion of the conversion from note to frequency, see:
    //  https://www.translatorscafe.com/unit-converter/en-US/calculator/note-frequency/
    // Note that the '4096.0' here represents 44,100 Hz - the base note frequency.
    const float freq = 4096.0f * std::powf(2.0f, noteOffsetF / 12.0f);

    if (freq > (float) UINT16_MAX) {
        return UINT16_MAX;
    }

    return (uint16_t) freq;
}
#endif

//------------------------------------------------------------------------------------------------------------------------------------------
// Update one or more reverb parameters, including reverb mode.
// Note that if the reverb mode is changed, then the reverb depth is cleared to '0'.
// Returns 'SPU_ERROR' on failure, otherwise 'SPU_SUCCESS'.
//------------------------------------------------------------------------------------------------------------------------------------------
int32_t LIBSPU_SpuSetReverbModeParam(const SpuReverbAttr& reverbAttr) noexcept {
    // If no attributes are set in the mask then the behavior is that ALL attributes are being updated
    const uint32_t attribMask = reverbAttr.mask;
    const bool bSetAllAttribs = (attribMask == 0);

    // Figure out what we are changing
    const bool bSetReverbMode           = (bSetAllAttribs || (attribMask & SPU_REV_MODE));
    const bool bSetReverbLeftDepth      = (bSetAllAttribs || (attribMask & SPU_REV_DEPTHL));
    const bool bSetReverbRightDepth     = (bSetAllAttribs || (attribMask & SPU_REV_DEPTHR));
    const bool bSetReverbDelay          = (bSetAllAttribs || (attribMask & SPU_REV_DELAYTIME));
    const bool bSetReverbFeedback       = (bSetAllAttribs || (attribMask & SPU_REV_FEEDBACK));
    const bool bClearReverbWorkingArea  = (reverbAttr.mode & SPU_REV_MODE_CLEAR_WA);

    // Set the new reverb mode (if changing) and grab the default reverb settings for whatever mode is now current
    Spu::Core& spu = PsxVm::gSpu;
    PsxVm::LockSpu spuLock;

    if (bSetReverbMode) {
        const SpuReverbMode reverbMode = (SpuReverbMode)(reverbAttr.mode & (~SPU_REV_MODE_CLEAR_WA));   // Must remove the 'CLEAR_WA' (clear working area flag)

        if (reverbMode < SPU_REV_MODE_MAX) {
            gReverbMode = reverbMode;

            // Update the reverb working area base address when changing mode
            #if PSYDOOM_LIMIT_REMOVING
                spu.reverbBaseAddr8 = LIBSPU_GetExtReverbBaseAddr(gReverbWorkAreaBaseAddrs[reverbMode]);
            #else
                spu.reverbBaseAddr8 = gReverbWorkAreaBaseAddrs[gReverbMode];
            #endif
        } else {
            // Bad reverb mode - this causes the call to fail!
            return SPU_ERROR;
        }
    }

    SpuReverbDef reverbDef = gReverbDefs[gReverbMode];

    // Initially we send all the fields to the SPU
    reverbDef.fieldBits = 0;

    // Manually adjust reverb delay time if the reverb mode allows it
    if (bSetReverbDelay) {
        if ((gReverbMode == SPU_REV_MODE_ECHO) || (gReverbMode == SPU_REV_MODE_DELAY)) {
            // Be more selective about what changes we make to SPU registers if we can
            if (!bSetReverbMode) {
                reverbDef.fieldBits = (
                    SPU_REVF_SAME_SIDE_REFRACT_ADDR_1_LEFT |
                    SPU_REVF_SAME_SIDE_REFRACT_ADDR_1_RIGHT |
                    SPU_REVF_COMB_ADDR_1_LEFT |
                    SPU_REVF_SAME_SIDE_REFRACT_ADDR_2_LEFT |
                    SPU_REVF_APF_ADDR_1_LEFT |
                    SPU_REVF_APF_ADDR_1_RIGHT
                );
            }

            // These are the tweaks that the original PsyQ SDK used by DOOM did based on custom delay parameters:
            const int32_t delay = reverbAttr.delay;
            const int16_t addrOffset = (int16_t)((delay * 4096) / 127);

            reverbDef.sameSideRefractAddr1Left = (int16_t)((delay * 8192) / 127) - reverbDef.apfOffset1;
            reverbDef.sameSideRefractAddr1Right = addrOffset - reverbDef.apfOffset2;
            reverbDef.sameSideRefractAddr2Left = addrOffset + reverbDef.sameSideRefractAddr2Right;
            reverbDef.combAddr1Left = addrOffset + reverbDef.combAddr1Right;
            reverbDef.apfAddr1Left = addrOffset + reverbDef.apfAddr2Left;
            reverbDef.apfAddr1Right = addrOffset + reverbDef.apfAddr2Right;
        }
    }

    // Manually adjust reverb feedback if the reverb mode allows it
    if (bSetReverbFeedback) {
        if ((gReverbMode == SPU_REV_MODE_ECHO) || (gReverbMode == SPU_REV_MODE_DELAY)) {
            // Be more selective about what changes we make to SPU registers if we can
            if (!bSetReverbMode) {
                reverbDef.fieldBits |= SPU_REVF_REFLECTION_VOLUME_2;
            }

            reverbDef.reflectionVolume2 = (uint16_t)((reverbAttr.feedback * 33024) / 127);
        }
    }

    // If the reverb mode is being set then we must disable master temporarily
    const bool bPrevReverbEnabled = spu.bReverbWriteEnable;
    spu.bReverbWriteEnable = false;

    // Update the reverb depth.
    // Note that if the reverb mode is being set then LIBSPU must also set reverb depth temporarily to '0', as per the docs.
    // It's up to callers in that situation to call 'LIBSPU_SpuSetReverbDepth' to set the depth again after that...
    if (bSetReverbMode) {
        spu.reverbVol.left = 0;
        spu.reverbVol.right = 0;
    } else {
        if (bSetReverbLeftDepth) {
            spu.reverbVol.left = reverbAttr.depth.left;
        }

        if (bSetReverbRightDepth) {
            spu.reverbVol.right = reverbAttr.depth.right;
        }
    }

    // Update the SPU reverb registers if setting reverb mode, delay time or feedback.
    // If we are just updating the left/right reverb depth however, then we can skip this.
    if (bSetReverbMode || bSetReverbDelay || bSetReverbFeedback) {
        const uint32_t regBits = reverbDef.fieldBits;
        const bool bSetAllRegs = (regBits == 0);

        const auto updateReg = [=](const uint32_t idx, auto& reg, const uint16_t value) noexcept {
            if (bSetAllRegs || (regBits & (1 << idx))) {
                reg = value;
            }
        };

        updateReg(0, spu.reverbRegs.dispAPF1, reverbDef.apfOffset1);
        updateReg(1, spu.reverbRegs.dispAPF2, reverbDef.apfOffset2);
        updateReg(2, spu.reverbRegs.volIIR, reverbDef.reflectionVolume1);
        updateReg(3, spu.reverbRegs.volComb1, reverbDef.combVolume1);
        updateReg(4, spu.reverbRegs.volComb2, reverbDef.combVolume2);
        updateReg(5, spu.reverbRegs.volComb3, reverbDef.combVolume3);
        updateReg(6, spu.reverbRegs.volComb4, reverbDef.combVolume4);
        updateReg(7, spu.reverbRegs.volWall, reverbDef.reflectionVolume2);
        updateReg(8, spu.reverbRegs.volAPF1, reverbDef.apfVolume1);
        updateReg(9, spu.reverbRegs.volAPF2, reverbDef.apfVolume2);
        updateReg(10, spu.reverbRegs.addrLSame1, reverbDef.sameSideRefractAddr1Left);
        updateReg(11, spu.reverbRegs.addrRSame1, reverbDef.sameSideRefractAddr1Right);
        updateReg(12, spu.reverbRegs.addrLComb1, reverbDef.combAddr1Left);
        updateReg(13, spu.reverbRegs.addrRComb1, reverbDef.combAddr1Right);
        updateReg(14, spu.reverbRegs.addrLComb2, reverbDef.combAddr2Left);
        updateReg(15, spu.reverbRegs.addrRComb2, reverbDef.combAddr2Right);
        updateReg(16, spu.reverbRegs.addrLSame2, reverbDef.sameSideRefractAddr2Left);
        updateReg(17, spu.reverbRegs.addrRSame2, reverbDef.sameSideRefractAddr2Right);
        updateReg(18, spu.reverbRegs.addrLDiff1, reverbDef.diffSideReflectAddr1Left);
        updateReg(19, spu.reverbRegs.addrRDiff1, reverbDef.diffSideReflectAddr1Right);
        updateReg(20, spu.reverbRegs.addrLComb3, reverbDef.combAddr3Left);
        updateReg(21, spu.reverbRegs.addrRComb3, reverbDef.combAddr3Right);
        updateReg(22, spu.reverbRegs.addrLComb4, reverbDef.combAddr4Left);
        updateReg(23, spu.reverbRegs.addrRComb4, reverbDef.combAddr4Right);
        updateReg(24, spu.reverbRegs.addrLDiff2, reverbDef.diffSideReflectAddr2Left);
        updateReg(25, spu.reverbRegs.addrRDiff2, reverbDef.diffSideReflectAddr2Right);
        updateReg(26, spu.reverbRegs.addrLAPF1, reverbDef.apfAddr1Left);
        updateReg(27, spu.reverbRegs.addrRAPF1, reverbDef.apfAddr1Right);
        updateReg(28, spu.reverbRegs.addrLAPF2, reverbDef.apfAddr2Left);
        updateReg(29, spu.reverbRegs.addrRAPF2, reverbDef.apfAddr2Right);
        updateReg(30, spu.reverbRegs.volLIn, reverbDef.inputVolLeft);
        updateReg(31, spu.reverbRegs.volRIn, reverbDef.inputVolRight);
    }

    // Clear the reverb working area if that was specified
    if (bClearReverbWorkingArea) {
        LIBSPU_SpuClearReverbWorkArea();
    }

    // Restore master reverb if we disabled it and return success
    spu.bReverbWriteEnable = bPrevReverbEnabled;
    return SPU_SUCCESS;
}

//------------------------------------------------------------------------------------------------------------------------------------------
// Set the specified common/master sound settings using the given stuct
//------------------------------------------------------------------------------------------------------------------------------------------
void LIBSPU_SpuSetCommonAttr(const SpuCommonAttr& attribs) noexcept {
    // Figure out what attributes we are setting
    const uint32_t attribMask = attribs.mask;

    const bool bSetAllAttribs   = (attribMask == 0);
    const bool bSetMVolL        = (bSetAllAttribs || (attribMask & SPU_COMMON_MVOLL));
    const bool bSetMVolModeL    = (bSetAllAttribs || (attribMask & SPU_COMMON_MVOLMODEL));
    const bool bSetMVolR        = (bSetAllAttribs || (attribMask & SPU_COMMON_MVOLR));
    const bool bSetMVolModeR    = (bSetAllAttribs || (attribMask & SPU_COMMON_MVOLMODER));
    const bool bSetCdVolL       = (bSetAllAttribs || (attribMask & SPU_COMMON_CDVOLL));
    const bool bSetCdVolR       = (bSetAllAttribs || (attribMask & SPU_COMMON_CDVOLR));
    const bool bSetCdReverb     = (bSetAllAttribs || (attribMask & SPU_COMMON_CDREV));
    const bool bSetCdMix        = (bSetAllAttribs || (attribMask & SPU_COMMON_CDMIX));

    // Attributes relating to PlayStation external inputs are ignored for PsyDoom (see comments below)
    #if false
        const bool bSetExtVolL      = (bSetAllAttribs || (attribMask & SPU_COMMON_EXTVOLL));
        const bool bSetExtVolR      = (bSetAllAttribs || (attribMask & SPU_COMMON_EXTVOLR));
        const bool bSetExtReverb    = (bSetAllAttribs || (attribMask & SPU_COMMON_EXTREV));
        const bool bSetExtMix       = (bSetAllAttribs || (attribMask & SPU_COMMON_EXTMIX));
    #endif

    // Set: master volume and mode (left)
    Spu::Core& spu = PsxVm::gSpu;
    PsxVm::LockSpu spuLock;

    if (bSetMVolL) {
        const uint16_t mode = (bSetMVolModeL) ? attribs.mvolmode.left : 0;

        if (mode == 0) {
            spu.masterVol.left = attribs.mvol.left & 0x7FFF;
        } else {
            const uint16_t volBits = std::max(std::min(attribs.mvol.left, (int16_t) 0x7F), (int16_t) 0);
            const uint16_t modeBits = 0x8000 | ((mode - 1) << 12);
            spu.masterVol.left = modeBits | volBits;
        }
    }

    // Set: master volume and mode (right)
    if (bSetMVolR) {
        const uint16_t mode = (bSetMVolModeR) ? attribs.mvolmode.right : 0;

        if (mode == 0) {
            spu.masterVol.right = attribs.mvol.right & 0x7FFF;
        } else {
            const uint16_t volBits = std::max(std::min(attribs.mvol.right, (int16_t) 0x7F), (int16_t) 0);
            const uint16_t modeBits = 0x8000 | ((mode - 1) << 12);
            spu.masterVol.right = modeBits | volBits;
        }
    }

    // Note: PsyDoom's new SPU implemention only supports a single external input, which is used to supply CD audio.
    // Because of this, parameters relating to CD volume and reverb are set for the 'external input' on the SPU and not on dedicated
    // fields relating to CD audio specifically. Because there is only one external input also, I'm ignoring anything requested here
    // related to the PlayStation's original external input. Doom didn't use this input so that's okay to do...

    // Set: cd volume left and right
    if (bSetCdVolL) {
        spu.extInputVol.left = attribs.cd.volume.left;
    }

    if (bSetCdVolR) {
        spu.extInputVol.right = attribs.cd.volume.right;
    }

    // Set: cd reverb and mix enabled
    if (bSetCdReverb) {
        spu.bExtReverbEnable = (attribs.cd.reverb != 0);
    }

    if (bSetCdMix) {
        spu.bExtEnabled = (attribs.cd.mix != 0);
    }

    // Attributes relating to PlayStation external inputs are ignored for PsyDoom (see comments above)
    #if false
        if (bSetExtVolL) {
            spu.extInputVol.left = attribs.ext.volume.left;
        }

        if (bSetExtVolR) {
            spu.extInputVol.right = attribs.ext.volume.right;
        }

        if (bSetExtReverb) {
            spu.bExtReverbEnable = (attribs.ext.reverb != 0);
        }

        if (bSetExtMix) {
            spu.bExtEnabled = (attribs.ext.mix != 0);
        }
    #endif
}

//------------------------------------------------------------------------------------------------------------------------------------------
// Returns the address in SPU RAM where reverb effects are performed.
// Any bytes past this address are used for reverb.
//------------------------------------------------------------------------------------------------------------------------------------------
uint32_t LIBSPU_SpuGetReverbOffsetAddr() noexcept {
    PsxVm::LockSpu spuLock;
    return PsxVm::gSpu.reverbBaseAddr8 * 8;
}

//------------------------------------------------------------------------------------------------------------------------------------------
// Zero out the area used for reverb effects.
// Will return 'SPU_ERROR' if that area is currently in use, otherwise 'SPU_SUCCESS'.
//------------------------------------------------------------------------------------------------------------------------------------------
int32_t LIBSPU_SpuClearReverbWorkArea() noexcept {
    // Can't clear the reverb area if reverb is active!
    // Also can't clear if no reverb address is set:
    Spu::Core& spu = PsxVm::gSpu;
    PsxVm::LockSpu spuLock;

    const uint32_t reverbBaseAddr = spu.reverbBaseAddr8 * 8;

    if (spu.bReverbWriteEnable || (reverbBaseAddr == 0))
        return SPU_ERROR;

    // Zero the reverb area
    #if SIMPLE_SPU_FLOAT_SPU
        std::memset(spu.pReverbRam, 0, sizeof(float) * spu.numReverbRamSamples);
    #else
        if (reverbBaseAddr < spu.ramSize) {
            const uint32_t reverbAreaSize = spu.ramSize - reverbBaseAddr;
            std::memset(spu.pRam + reverbBaseAddr, 0, reverbAreaSize);
        }
    #endif

    return SPU_SUCCESS;
}

//------------------------------------------------------------------------------------------------------------------------------------------
// Begin SPU processing. Note: this is called automatically by 'LIBSPU_SpuInit'.
//------------------------------------------------------------------------------------------------------------------------------------------
void LIBSPU_SpuStart() noexcept {
    // Doesn't need to do anything in this LIBSPU reimplementation.
    // This previously setup DMA related events, but now since we have no more DMA there is nothing do be done...
}

//------------------------------------------------------------------------------------------------------------------------------------------
// Set the depth of reverb using the settings in the given structure.
// By default both left and right channels are set, but you can set independently using 'SPU_REV_DEPTHL' and 'SPU_REV_DEPTHR' mask flags.
//------------------------------------------------------------------------------------------------------------------------------------------
void LIBSPU_SpuSetReverbDepth(const SpuReverbAttr& reverb) noexcept {
    Spu::Core& spu = PsxVm::gSpu;
    PsxVm::LockSpu spuLock;

    if ((reverb.mask == 0) || (reverb.mask & SPU_REV_DEPTHL)) {
        spu.reverbVol.left = reverb.depth.left;
    }

    if ((reverb.mask == 0) || (reverb.mask & SPU_REV_DEPTHR)) {
        spu.reverbVol.right = reverb.depth.right;
    }
}

//------------------------------------------------------------------------------------------------------------------------------------------
// Enable or disable reverb for specific voices, or set the reverb enabled/disabled status for ALL voices.
// Returns a bit mask indicating which voices have reverb enabled, upon return.
//
// The meaning of 'onOff' is as follows:
//  SPU_OFF : disable reverb for voices with set bits in 'voiceBits'
//  SPU_ON  : enable reverb for voices with set bits in 'voiceBits'
//  SPU_BIT : enable or disable reverb for ALL voices based on whether the corresponding voice bit is set in 'voiceBits'.
//            If the bit is set then reverb is enabled.
//------------------------------------------------------------------------------------------------------------------------------------------
SpuVoiceMask LIBSPU_SpuSetReverbVoice(const int32_t onOff, const SpuVoiceMask voiceBits) noexcept {
    // Enabling/disabling reverb for every single voice with the bit mask?
    Spu::Core& spu = PsxVm::gSpu;
    PsxVm::LockSpu spuLock;

    if (onOff == SPU_BIT) {
        for (int32_t voiceIdx = 0; voiceIdx < SPU_NUM_VOICES; ++voiceIdx) {
            Spu::Voice& voice = spu.pVoices[voiceIdx];
            voice.bDoReverb = (voiceBits & (SpuVoiceMask(1) << voiceIdx));
        }

        return voiceBits;
    }

    // Enable or disable reverb for specific voices and return the reverb status of all voices after
    const bool bEnableReverb = (onOff != SPU_OFF);
    SpuVoiceMask enabledVoiceBits = 0;

    for (int32_t voiceIdx = 0; voiceIdx < SPU_NUM_VOICES; ++voiceIdx) {
        Spu::Voice& voice = spu.pVoices[voiceIdx];

        if (voiceBits & (SpuVoiceMask(1) << voiceIdx)) {
            voice.bDoReverb = bEnableReverb;
        }

        enabledVoiceBits |= (voice.bDoReverb) ? (SpuVoiceMask(1) << voiceIdx) : 0;
    }

    return enabledVoiceBits;
}

//------------------------------------------------------------------------------------------------------------------------------------------
// Initializes the SPU to a default state
//------------------------------------------------------------------------------------------------------------------------------------------
void LIBSPU_SpuInit() noexcept {
    Spu::Core& spu = PsxVm::gSpu;
    PsxVm::LockSpu spuLock;

    spu.bExtEnabled = false;
    spu.bExtReverbEnable = false;
    spu.bUnmute = false;
    spu.bReverbWriteEnable = false;

    spu.masterVol = {};
    spu.reverbVol = {};
    spu.extInputVol = {};

    for (uint32_t voiceIdx = 0; voiceIdx < spu.numVoices; ++voiceIdx) {
        Spu::Voice& voice = spu.pVoices[voiceIdx];

        Spu::keyOff(voice);
        voice.volume = {};
        voice.sampleRate = 0x00FF;
        voice.adpcmStartAddr8 = 0;
        voice.env = {};
    }

    spu.bUnmute = true;
    LIBSPU_SpuStart();

    // Ensure the reverb work area address is correct
    const uint16_t reverbBaseAddr8 = gReverbWorkAreaBaseAddrs[(gReverbMode < SPU_REV_MODE_MAX) ? gReverbMode : 0];

    #if PSYDOOM_LIMIT_REMOVING
        spu.reverbBaseAddr8 = LIBSPU_GetExtReverbBaseAddr(reverbBaseAddr8);
    #else
        spu.reverbBaseAddr8 = reverbBaseAddr8;
    #endif

    gTransferStartAddr = 0;
}

//------------------------------------------------------------------------------------------------------------------------------------------
// Turn reverb on or off and return the new reverb on/off setting.
// In the real LIBSPU, this could fail due to 'SpuMalloc' occupying the work area required for reverb.
// Since DOOM does not use SpuMalloc, this can never fail.
//------------------------------------------------------------------------------------------------------------------------------------------
int32_t LIBSPU_SpuSetReverb(const int32_t onOff) noexcept {
    const bool bEnable = (onOff != SPU_OFF);

    Spu::Core& spu = PsxVm::gSpu;
    PsxVm::LockSpu spuLock;
    spu.bReverbWriteEnable = bEnable;
    return (bEnable) ? SPU_ON : SPU_OFF;
}

//------------------------------------------------------------------------------------------------------------------------------------------
// Terminate SPU processing and release any resources used
//------------------------------------------------------------------------------------------------------------------------------------------
void LIBSPU_SpuQuit() noexcept {
    // Doesn't need to do anything in this LIBSPU reimplementation.
    // This previously cleaned up DMA related events, but now since we have no more DMA there is nothing do be done...
}

//------------------------------------------------------------------------------------------------------------------------------------------
// Query if there is any ongoing transfers to SPU RAM
//------------------------------------------------------------------------------------------------------------------------------------------
bool LIBSPU_SpuIsTransferCompleted([[maybe_unused]] const SpuTransferQuery mode) noexcept {
    // The answer to this question is always 'yes' for this LIBSPU reimplementation.
    // All transfer operations are now completely synchronous.
    return true;
}

//------------------------------------------------------------------------------------------------------------------------------------------
// Initialize SPU memory management.
// This call is now a NO-OP because DOOM does not use 'SpuMalloc' - hence no need to implement this.
//------------------------------------------------------------------------------------------------------------------------------------------
void LIBSPU_SpuInitMalloc([[maybe_unused]] const int32_t maxAllocs, [[maybe_unused]] uint8_t* const pMemMangementTbl) noexcept {
    // Ignore because DOOM doesn't use 'SpuMalloc'...
}

//------------------------------------------------------------------------------------------------------------------------------------------
// Set the mode of transfer from main RAM to SPU RAM
//------------------------------------------------------------------------------------------------------------------------------------------
void LIBSPU_SpuSetTransferMode([[maybe_unused]] const SpuTransferMode mode) noexcept {
    // Don't need to do anything in the emulated environment - we always do a straight 'memcpy' to SPU RAM...
}

//------------------------------------------------------------------------------------------------------------------------------------------
// Set where in SPU RAM the next transfer of data will be to.
// The given address must be in range and is rounded up to the next 8 byte boundary.
//------------------------------------------------------------------------------------------------------------------------------------------
uint32_t LIBSPU_SpuSetTransferStartAddr(const uint32_t addr) noexcept {
    // Per PsyQ docs the address given is rounded up to the next 8-byte boundary.
    // It also must be in range or the instruction is ignored and '0' returned.
    const uint32_t alignedAddr = (addr + 7) & (~7u);

    Spu::Core& spu = PsxVm::gSpu;
    PsxVm::LockSpu spuLock;

    if (alignedAddr < spu.ramSize) {
        gTransferStartAddr = alignedAddr;
        return alignedAddr;
    } else {
        return 0;
    }
}

//------------------------------------------------------------------------------------------------------------------------------------------
// Write the specified number of bytes to SPU RAM at the previously set transfer address.
// Returns the number of bytes written, which may be less than the request if it is out of bounds.
//
// Note: unlike the original PsyQ SDK, the write here happens SYNCHRONOUSLY and immediately.
// Originally this operation would be done via DMA and would have have taken some time...
//------------------------------------------------------------------------------------------------------------------------------------------
uint32_t LIBSPU_SpuWrite(const void* const pData, const uint32_t size) noexcept {
    // Figure out how much data we can copy to SPU RAM, do the write and then return what we did
    Spu::Core& spu = PsxVm::gSpu;
    PsxVm::LockSpu spuLock;

    const uint32_t maxWriteSize = (gTransferStartAddr < spu.ramSize) ? spu.ramSize - gTransferStartAddr : 0;
    const uint32_t thisWriteSize = (size <= maxWriteSize) ? size : maxWriteSize;

    std::memcpy(spu.pRam + gTransferStartAddr, pData, thisWriteSize);
    return thisWriteSize;
}

//------------------------------------------------------------------------------------------------------------------------------------------
// Set the specified attributes for the specified voices in the data structure.
// Also 'key on' (begin playing) the specified voices.
//------------------------------------------------------------------------------------------------------------------------------------------
void LIBSPU_SpuSetKeyOnWithAttr(const SpuVoiceAttr& attribs) noexcept {
    LIBSPU_SpuSetVoiceAttr(attribs);
    LIBSPU_SpuSetKey(1, attribs.voice_bits);
}

//------------------------------------------------------------------------------------------------------------------------------------------
// Begin voices ramp up (attack phase or 'key on') or begin voice ramp down (release phase or 'key off').
// The voices affected are specified by the given voice bit mask.
// The on/off action to perform must be either 'SPU_OFF' or 'SPU_ON'
//------------------------------------------------------------------------------------------------------------------------------------------
void LIBSPU_SpuSetKey(const int32_t onOff, const SpuVoiceMask voiceBits) noexcept {
    Spu::Core& spu = PsxVm::gSpu;
    PsxVm::LockSpu spuLock;

    const uint32_t numVoicesToSet = std::min(SPU_NUM_VOICES, spu.numVoices);

    if (onOff == SPU_OFF) {
        for (uint32_t voiceIdx = 0; voiceIdx < numVoicesToSet; ++voiceIdx) {
            if (voiceBits & (SpuVoiceMask(1) << voiceIdx)) {
                Spu::Voice& voice = spu.pVoices[voiceIdx];
                Spu::keyOff(voice);
            }
        }
    }
    else if (onOff == SPU_ON) {
        for (uint32_t voiceIdx = 0; voiceIdx < numVoicesToSet; ++voiceIdx) {
            if (voiceBits & (SpuVoiceMask(1) << voiceIdx)) {
                Spu::Voice& voice = spu.pVoices[voiceIdx];
                Spu::keyOn(voice);
            }
        }
    }
}

//------------------------------------------------------------------------------------------------------------------------------------------
// Get the state of all SPU voices. The following return values mean the following:
//
//  SPU_OFF         : Key off status,   Envelope is '0'         (silent)
//  SPU_ON          : Key on status,    Envelope is != '0'      (attack/decay)
//  SPU_OFF_ENV_ON  : Key off status,   Envelope is != '0'      (release)
//  SPU_ON_ENV_OFF  : Key on status,    Envelope is '0'         (sustain)
//------------------------------------------------------------------------------------------------------------------------------------------
void LIBSPU_SpuGetAllKeysStatus(uint8_t statuses[SPU_NUM_VOICES]) noexcept {
    // Get the statuses
    Spu::Core& spu = PsxVm::gSpu;
    const uint32_t numVoicesToGet = std::min(SPU_NUM_VOICES, spu.numVoices);

    for (uint32_t voiceIdx = 0; voiceIdx < numVoicesToGet; ++voiceIdx) {
        const Spu::EnvPhase envPhase = spu.pVoices[voiceIdx].envPhase;

        switch (envPhase) {
            case Spu::EnvPhase::Attack:
            case Spu::EnvPhase::Decay:
                statuses[voiceIdx] = SPU_ON;
                break;

            case Spu::EnvPhase::Sustain:
                statuses[voiceIdx] = SPU_ON_ENV_OFF;
                break;

            case Spu::EnvPhase::Release:
                statuses[voiceIdx] = SPU_OFF_ENV_ON;
                break;

            case Spu::EnvPhase::Off:
            default:
                statuses[voiceIdx] = SPU_OFF;
                break;
        }
    }

    // Just in case the SPU has less voices than we expect
    for (uint32_t voiceIdx = numVoicesToGet; voiceIdx < SPU_NUM_VOICES; ++voiceIdx) {
        statuses[voiceIdx] = SPU_OFF;
    }
}
