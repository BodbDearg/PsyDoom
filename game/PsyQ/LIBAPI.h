#pragma once

#include <cstdint>

//------------------------------------------------------------------------------------------------------------------------------------------
// Cause/source descriptors for 'OpenEvent' and 'SetRCnt'.
//
// Note: there are lots more event causes in the real PsyQ SDK, I'm just listing the ones needed for Doom and some extra ones for
// added context here. Not all of these are supported by PsyDoom, we just implemented what is needed to for the port.
//------------------------------------------------------------------------------------------------------------------------------------------
static constexpr int32_t RCntCNT0   = 0xF2000000;   // Hardware timer 1: increment counter on every pixel displayed
static constexpr int32_t RCntCNT1   = 0xF2000001;   // Hardware timer 2: increment counter on every horizontal line (horizontal sync)
static constexpr int32_t RCntCNT2   = 0xF2000002;   // Hardware timer 3: increment counter on every 8 CPU clocks
static constexpr int32_t RCntCNT3   = 0xF2000003;   // Hardware timer 4: fire interrupt on every vertical sync
static constexpr int32_t HwSIO      = 0xF000000B;   // Event generated by serial I/O (link cable)

//------------------------------------------------------------------------------------------------------------------------------------------
// Event types and modes for 'OpenEvent' (respectively); i'm just supporting the types used by DOOM.
//------------------------------------------------------------------------------------------------------------------------------------------
static constexpr int32_t EvSpINT    = 0x0002;   // Interrupt event type
static constexpr int32_t EvSpIOER   = 0x0400;   // Read completed event type
static constexpr int32_t EvSpIOEW   = 0x0800;   // Write completed event type
static constexpr int32_t EvMdINTR   = 0x1000;   // Event mode: driven by interrupts
static constexpr int32_t EvMdNOINTR = 0x2000;   // Event mode: not driven by interrupts

//------------------------------------------------------------------------------------------------------------------------------------------
// Root counter modes for 'SetRCnt': just supporting the 'interrupt driven' mode
//------------------------------------------------------------------------------------------------------------------------------------------
static constexpr int32_t RCntMdINTR = 0x1000;

bool LIBAPI_CloseEvent(const int32_t event) noexcept;
void LIBAPI_EnterCriticalSection() noexcept;
bool LIBAPI_EnableEvent(const int32_t event) noexcept;

bool LIBAPI_InitPAD(
    uint8_t pPadInputBuffer1[34],
    uint8_t pPadInputBuffer2[34],
    const int32_t inputBuffer1Size,
    const int32_t inputBuffer2Size
) noexcept;

bool LIBAPI_SetRCnt(const int32_t cntType, const uint16_t target, const int32_t mode) noexcept;
bool LIBAPI_StartRCnt(const int32_t cntType) noexcept;
bool LIBAPI_DisableEvent(const int32_t event) noexcept;
bool LIBAPI_StartPAD() noexcept;
void LIBAPI_ChangeClearPAD(const int32_t val) noexcept;
int32_t LIBAPI_OpenEvent(const int32_t cause, const int32_t type, const int32_t mode, int32_t (* const pHandler)()) noexcept;
void LIBAPI_ExitCriticalSection() noexcept;
void LIBAPI_FlushCache() noexcept;
void LIBAPI_InitHeap(void* const pHeapMem, const uint32_t heapSize) noexcept;
